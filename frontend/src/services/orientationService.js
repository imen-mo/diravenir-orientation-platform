import axios from 'axios';
import { buildApiUrl } from '../config/api';
import API_CONFIG from '../config/api';

// Service pour l'orientation
class OrientationService {
  
  /**
   * Calcule l'orientation en envoyant les r√©ponses au backend
   * @param {Object} answers - Les r√©ponses du test d'orientation
   * @returns {Promise<Object>} - La r√©ponse du backend avec les recommandations
   */
  async calculateOrientation(answers) {
    try {
      console.log('üöÄ Service d\'orientation - D√©but de calculateOrientation');
      console.log('üì§ Donn√©es envoy√©es:', answers);
      
      const url = buildApiUrl(API_CONFIG.ENDPOINTS.ORIENTATION.CALCULATE);
      console.log('üåê URL de l\'API:', url);
      console.log('üîß Configuration API:', API_CONFIG);
      
      const response = await axios.post(url, answers);
      console.log('‚úÖ R√©ponse re√ßue du backend:', response);
      console.log('üìä Donn√©es de la r√©ponse:', response.data);
      
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur dans le service d\'orientation:', error);
      console.error('‚ùå D√©tails de l\'erreur:', {
        message: error.message,
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data
      });
      throw new Error('Impossible de calculer l\'orientation: ' + error.message);
    }
  }

  /**
   * R√©cup√®re le profil utilisateur calcul√©
   * @param {Object} answers - Les r√©ponses du test
   * @returns {Promise<Object>} - Le profil utilisateur
   */
  async getUserProfile(answers) {
    try {
      const response = await axios.post(
        buildApiUrl(API_CONFIG.ENDPOINTS.ORIENTATION.PROFILE),
        answers
      );
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration du profil:', error);
      throw new Error('Impossible de r√©cup√©rer le profil');
    }
  }

  /**
   * R√©cup√®re toutes les majeures disponibles
   * @returns {Promise<Array>} - Liste des majeures
   */
  async getAllMajors() {
    try {
      const response = await axios.get(
        buildApiUrl(API_CONFIG.ENDPOINTS.ORIENTATION.MAJORS)
      );
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des majeures:', error);
      throw new Error('Impossible de r√©cup√©rer les majeures');
    }
  }

  /**
   * Test avec des r√©ponses d'exemple (pour d√©veloppement)
   * @returns {Promise<Object>} - R√©sultats du test
   */
  async testWithExampleAnswers() {
    try {
      const response = await axios.get(
        buildApiUrl(API_CONFIG.ENDPOINTS.ORIENTATION.TEST_EXAMPLE)
      );
      return response.data;
    } catch (error) {
      console.error('Erreur lors du test avec exemples:', error);
      throw new Error('Impossible d\'ex√©cuter le test avec exemples');
    }
  }
}

// Instance unique du service
const orientationService = new OrientationService();

export default orientationService;
