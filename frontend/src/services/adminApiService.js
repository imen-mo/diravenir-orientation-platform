import axios from 'axios';

class AdminApiService {
  constructor() {
    this.baseURL = 'http://localhost:8084/api';
    this.client = axios.create({
      baseURL: this.baseURL,
      timeout: 10000,
      headers: {
        'Content-Type': 'application/json'
      }
    });

    // Intercepteur pour l'auth
    this.client.interceptors.request.use(
      (config) => {
        const token = localStorage.getItem('token');
        if (token) {
          config.headers.Authorization = `Bearer ${token}`;
        }
        return config;
      },
      (error) => Promise.reject(error)
    );

    // Intercepteur pour les erreurs
    this.client.interceptors.response.use(
      (response) => response,
      (error) => {
        if (error.response?.status === 401) {
          localStorage.removeItem('token');
          localStorage.removeItem('user');
          window.location.href = '/login';
        }
        return Promise.reject(error);
      }
    );
  }

  // ===== STATISTIQUES =====
  
  /**
   * R√©cup√©rer les statistiques g√©n√©rales
   * @returns {Promise<Object>} Statistiques depuis la DB r√©elle
   */
  async getStats() {
    try {
      console.log('üìä R√©cup√©ration des statistiques depuis la DB...');
      const response = await this.client.get('/admin/stats');
      console.log('‚úÖ Statistiques r√©cup√©r√©es:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration stats:', error);
      throw new Error('Impossible de r√©cup√©rer les statistiques depuis la base de donn√©es');
    }
  }

  /**
   * R√©cup√©rer les statistiques des utilisateurs
   * @returns {Promise<Object>} Statistiques des utilisateurs
   */
  async getUserStatistics() {
    try {
      console.log('üë• R√©cup√©ration des statistiques utilisateurs...');
      const response = await this.client.get('/admin/users/statistics');
      console.log('‚úÖ Statistiques utilisateurs r√©cup√©r√©es:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration stats utilisateurs:', error);
      throw new Error('Impossible de r√©cup√©rer les statistiques des utilisateurs');
    }
  }

  /**
   * R√©cup√©rer les statistiques des programmes
   * @returns {Promise<Object>} Statistiques des programmes
   */
  async getProgramStatistics() {
    try {
      console.log('üéì R√©cup√©ration des statistiques programmes...');
      const response = await this.client.get('/admin/programs/statistics');
      console.log('‚úÖ Statistiques programmes r√©cup√©r√©es:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration stats programmes:', error);
      throw new Error('Impossible de r√©cup√©rer les statistiques des programmes');
    }
  }

  /**
   * R√©cup√©rer les statistiques des applications
   * @returns {Promise<Object>} Statistiques des applications
   */
  async getApplicationStatistics() {
    try {
      console.log('üìù R√©cup√©ration des statistiques applications...');
      const response = await this.client.get('/admin/applications/statistics');
      console.log('‚úÖ Statistiques applications r√©cup√©r√©es:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration stats applications:', error);
      throw new Error('Impossible de r√©cup√©rer les statistiques des applications');
    }
  }

  /**
   * R√©cup√©rer les donn√©es timeline des applications
   * @param {number} months - Nombre de mois √† r√©cup√©rer (d√©faut: 12)
   * @returns {Promise<Object>} Donn√©es timeline des applications
   */
  async getApplicationTimeline(months = 12) {
    try {
      console.log('üìÖ R√©cup√©ration des donn√©es timeline applications...', { months });
      const response = await this.client.get('/admin/applications/timeline', {
        params: { months }
      });
      console.log('‚úÖ Donn√©es timeline applications r√©cup√©r√©es:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration timeline applications:', error);
      throw new Error('Impossible de r√©cup√©rer les donn√©es timeline des applications');
    }
  }

  /**
   * Supprimer une candidature
   * @param {string} applicationId - ID de la candidature
   * @returns {Promise<Object>} R√©sultat de la suppression
   */
  async deleteApplication(applicationId) {
    try {
      console.log(`üóëÔ∏è Suppression de la candidature ${applicationId}...`);
      const response = await this.client.delete(`/admin/applications/${applicationId}`);
      console.log('‚úÖ Candidature supprim√©e:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur suppression candidature:', error);
      throw new Error('Impossible de supprimer la candidature');
    }
  }

  // ===== IMPORT EXCEL =====
  
  /**
   * Importer des programmes depuis un fichier Excel
   * @param {FormData} formData - Donn√©es du fichier Excel
   * @returns {Promise<Object>} R√©sultat de l'import
   */
  async importProgramsFromExcel(formData) {
    try {
      console.log('üìä Import programmes depuis Excel...');
      const response = await this.client.post('/admin/excel/import/programs', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      console.log('‚úÖ Import termin√©:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur import Excel:', error);
      throw new Error('Impossible d\'importer le fichier Excel');
    }
  }

  /**
   * T√©l√©charger le template Excel
   * @returns {Promise<Blob>} Template Excel
   */
  async downloadExcelTemplate() {
    try {
      console.log('üì• T√©l√©chargement template Excel...');
      const response = await this.client.get('/admin/excel/template/programs', {
        responseType: 'blob'
      });
      console.log('‚úÖ Template t√©l√©charg√©');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur t√©l√©chargement template:', error);
      throw new Error('Impossible de t√©l√©charger le template');
    }
  }

  /**
   * Valider un fichier Excel avant import
   * @param {FormData} formData - Donn√©es du fichier Excel
   * @returns {Promise<Object>} R√©sultat de la validation
   */
  async validateExcelFile(formData) {
    try {
      console.log('üîç Validation fichier Excel...');
      const response = await this.client.post('/admin/excel/validate/programs', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      console.log('‚úÖ Fichier valid√©:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur validation fichier:', error);
      throw new Error('Impossible de valider le fichier');
    }
  }

  // ===== UTILISATEURS =====
  
  /**
   * R√©cup√©rer la liste des utilisateurs avec pagination
   * @param {Object} params - Param√®tres de pagination et filtres
   * @returns {Promise<Object>} Liste des utilisateurs depuis la DB
   */
  async getUsers(params = {}) {
    try {
      console.log('üë• R√©cup√©ration des utilisateurs depuis la DB...', params);
      const response = await this.client.get('/admin/users', { params });
      console.log('‚úÖ Utilisateurs r√©cup√©r√©s:', response.data);
      
      // Si l'API retourne directement une liste, on la transforme en objet avec pagination
      if (Array.isArray(response.data)) {
        return {
          items: response.data,
          total: response.data.length,
          page: params.page || 0,
          limit: params.limit || 10
        };
      }
      
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration utilisateurs:', error);
      throw new Error('Impossible de r√©cup√©rer les utilisateurs depuis la base de donn√©es');
    }
  }

  /**
   * Cr√©er un nouvel utilisateur
   * @param {Object} userData - Donn√©es de l'utilisateur
   * @returns {Promise<Object>} Utilisateur cr√©√©
   */
  async createUser(userData) {
    try {
      console.log('‚ûï Cr√©ation utilisateur dans la DB...', userData);
      const response = await this.client.post('/admin/users', userData);
      console.log('‚úÖ Utilisateur cr√©√©:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation utilisateur:', error);
      throw new Error('Impossible de cr√©er l\'utilisateur');
    }
  }

  /**
   * Modifier un utilisateur
   * @param {number} id - ID de l'utilisateur
   * @param {Object} userData - Nouvelles donn√©es
   * @returns {Promise<Object>} Utilisateur modifi√©
   */
  async updateUser(id, userData) {
    try {
      console.log('‚úèÔ∏è Modification utilisateur dans la DB...', id, userData);
      const response = await this.client.put(`/admin/users/${id}`, userData);
      console.log('‚úÖ Utilisateur modifi√©:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur modification utilisateur:', error);
      throw new Error('Impossible de modifier l\'utilisateur');
    }
  }

  /**
   * Supprimer un utilisateur
   * @param {number} id - ID de l'utilisateur
   * @returns {Promise<Object>} Confirmation de suppression
   */
  async deleteUser(id) {
    try {
      console.log('üóëÔ∏è Suppression utilisateur dans la DB...', id);
      const response = await this.client.delete(`/admin/users/${id}`);
      console.log('‚úÖ Utilisateur supprim√©:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur suppression utilisateur:', error);
      throw new Error('Impossible de supprimer l\'utilisateur');
    }
  }

  // ===== PROGRAMMES =====
  
  /**
   * R√©cup√©rer la liste des programmes avec pagination
   * @param {Object} params - Param√®tres de pagination et filtres
   * @returns {Promise<Object>} Liste des programmes depuis la DB
   */
  async getPrograms(params = {}) {
    try {
      console.log('üéì R√©cup√©ration des programmes depuis la DB...', params);
      const response = await this.client.get('/admin/programs', { params });
      console.log('‚úÖ Programmes r√©cup√©r√©s:', response.data);
      
      // Si l'API retourne directement une liste, on la transforme en objet avec pagination
      if (Array.isArray(response.data)) {
        return {
          items: response.data,
          total: response.data.length,
          page: params.page || 0,
          limit: params.limit || 10
        };
      }
      
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration programmes:', error);
      throw new Error('Impossible de r√©cup√©rer les programmes depuis la base de donn√©es');
    }
  }

  /**
   * Cr√©er un nouveau programme
   * @param {Object} programData - Donn√©es du programme
   * @returns {Promise<Object>} Programme cr√©√©
   */
  async createProgram(programData) {
    try {
      console.log('‚ûï Cr√©ation programme dans la DB...', programData);
      const response = await this.client.post('/admin/programs', programData);
      console.log('‚úÖ Programme cr√©√©:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation programme:', error);
      throw new Error('Impossible de cr√©er le programme');
    }
  }

  /**
   * Modifier un programme
   * @param {number} id - ID du programme
   * @param {Object} programData - Nouvelles donn√©es
   * @returns {Promise<Object>} Programme modifi√©
   */
  async updateProgram(id, programData) {
    try {
      console.log('‚úèÔ∏è Modification programme dans la DB...', id, programData);
      const response = await this.client.put(`/admin/programs/${id}`, programData);
      console.log('‚úÖ Programme modifi√©:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur modification programme:', error);
      throw new Error('Impossible de modifier le programme');
    }
  }

  /**
   * Supprimer un programme
   * @param {number} id - ID du programme
   * @returns {Promise<Object>} Confirmation de suppression
   */
  async deleteProgram(id) {
    try {
      console.log('üóëÔ∏è Suppression programme dans la DB...', id);
      const response = await this.client.delete(`/admin/programs/${id}`);
      console.log('‚úÖ Programme supprim√©:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur suppression programme:', error);
      throw new Error('Impossible de supprimer le programme');
    }
  }

  // ===== CANDIDATURES =====
  
  /**
   * R√©cup√©rer la liste des candidatures avec pagination
   * @param {Object} params - Param√®tres de pagination et filtres
   * @returns {Promise<Object>} Liste des candidatures depuis la DB
   */
  async getApplications(params = {}) {
    try {
      console.log('üìù R√©cup√©ration des candidatures depuis la DB...', params);
      const response = await this.client.get('/admin/applications', { params });
      console.log('‚úÖ Candidatures r√©cup√©r√©es:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration candidatures:', error);
      throw new Error('Impossible de r√©cup√©rer les candidatures depuis la base de donn√©es');
    }
  }

  /**
   * Modifier une candidature
   * @param {number} id - ID de la candidature
   * @param {Object} applicationData - Nouvelles donn√©es
   * @returns {Promise<Object>} Candidature modifi√©e
   */
  async updateApplication(id, applicationData) {
    try {
      console.log('‚úèÔ∏è Modification candidature dans la DB...', id, applicationData);
      const response = await this.client.put(`/admin/applications/${id}`, applicationData);
      console.log('‚úÖ Candidature modifi√©e:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur modification candidature:', error);
      throw new Error('Impossible de modifier la candidature');
    }
  }

  /**
   * Supprimer une candidature
   * @param {number} id - ID de la candidature
   * @returns {Promise<Object>} Confirmation de suppression
   */
  async deleteApplication(id) {
    try {
      console.log('üóëÔ∏è Suppression candidature dans la DB...', id);
      const response = await this.client.delete(`/admin/applications/${id}`);
      console.log('‚úÖ Candidature supprim√©e:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur suppression candidature:', error);
      throw new Error('Impossible de supprimer la candidature');
    }
  }

  // ===== DONN√âES R√âCENTES =====
  
  /**
   * R√©cup√©rer les donn√©es r√©centes
   * @returns {Promise<Object>} Donn√©es r√©centes depuis la DB
   */
  async getRecentData() {
    try {
      console.log('üïí R√©cup√©ration des donn√©es r√©centes depuis la DB...');
      const response = await this.client.get('/admin/dashboard/recent-data');
      console.log('‚úÖ Donn√©es r√©centes r√©cup√©r√©es:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration donn√©es r√©centes:', error);
      // Retourner un objet vide au lieu de fake data
      return {
        recentActivity: []
      };
    }
  }

  // ===== GESTION D'ERREURS =====
  
  /**
   * V√©rifier la connectivit√©
   * @returns {Promise<boolean>} √âtat de la connexion
   */
  async checkConnectivity() {
    try {
      await this.client.get('/health');
      return true;
    } catch (error) {
      return false;
    }
  }
}

// Instance singleton
const adminApiService = new AdminApiService();

export default adminApiService;
