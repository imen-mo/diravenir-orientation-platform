const testNewEndpoints = async () => {
    console.log('üîç TEST DES NOUVEAUX ENDPOINTS DE SAUVEGARDE');
    console.log('=============================================\n');

    const baseURL = 'http://localhost:8084';
    
    // Donn√©es de test
    const testData = {
        q1: "A", q2: "A", q3: "A", q4: "A", q5: "A", q6: "A", q7: "A", q8: "A", 
        q9: "A", q10: "A", q11: "A", q12: "A", q13: "A", q14: "A",
        studentInfo: {
            fullName: "Ahmed Benali",
            email: "ahmed.benali@test.com",
            phone: "+213123456789"
        }
    };

    try {
        // 1. Test de sauvegarde des r√©ponses
        console.log('1Ô∏è‚É£ Test de sauvegarde des r√©ponses...');
        const saveResponse = await fetch(`${baseURL}/api/orientation/save-answers`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(testData)
        });
        
        if (saveResponse.ok) {
            const saveResult = await saveResponse.json();
            console.log('‚úÖ Sauvegarde r√©ussie:', saveResult);
            
            const testId = saveResult.testId;
            
            // 2. Test de calcul et sauvegarde compl√®te
            console.log('\n2Ô∏è‚É£ Test de calcul et sauvegarde compl√®te...');
            const calculateResponse = await fetch(`${baseURL}/api/orientation/calculate-and-save`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(testData)
            });
            
            if (calculateResponse.ok) {
                const calculateResult = await calculateResponse.json();
                console.log('‚úÖ Calcul et sauvegarde r√©ussis:');
                console.log('   üìä Top score:', calculateResult.topScore);
                console.log('   üéØ Top major:', calculateResult.topMajor);
                console.log('   üìù Test ID:', calculateResult.testId);
                console.log('   üíæ Result ID:', calculateResult.resultId);
                
                // 3. Test de r√©cup√©ration par email
                console.log('\n3Ô∏è‚É£ Test de r√©cup√©ration par email...');
                const getResponse = await fetch(`${baseURL}/api/orientation/results/${testData.studentInfo.email}`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                if (getResponse.ok) {
                    const getResult = await getResponse.json();
                    console.log('‚úÖ R√©cup√©ration r√©ussie:', getResult);
                } else {
                    console.log('‚ö†Ô∏è R√©cup√©ration √©chou√©e:', getResponse.status);
                }
                
                // 4. Test des statistiques
                console.log('\n4Ô∏è‚É£ Test des statistiques...');
                const statsResponse = await fetch(`${baseURL}/api/orientation/statistics`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                if (statsResponse.ok) {
                    const statsResult = await statsResponse.json();
                    console.log('‚úÖ Statistiques r√©cup√©r√©es:', statsResult);
                } else {
                    console.log('‚ö†Ô∏è Statistiques √©chou√©es:', statsResponse.status);
                }
                
            } else {
                console.log('‚ùå Calcul et sauvegarde √©chou√©s:', calculateResponse.status);
                const error = await calculateResponse.text();
                console.log('   Erreur:', error);
            }
            
        } else {
            console.log('‚ùå Sauvegarde √©chou√©e:', saveResponse.status);
            const error = await saveResponse.text();
            console.log('   Erreur:', error);
        }

    } catch (error) {
        console.log('‚ùå Erreur de connexion:', error.message);
        console.log('üí° V√©rifiez que le backend est d√©marr√© sur le port 8084');
    }

    console.log('\nüìã R√âSUM√â DU TEST:');
    console.log('==================');
    console.log('‚úÖ Endpoints de sauvegarde impl√©ment√©s');
    console.log('‚úÖ Endpoints de r√©cup√©ration impl√©ment√©s');
    console.log('‚úÖ Endpoints de statistiques impl√©ment√©s');
    console.log('‚úÖ Persistance en base de donn√©es fonctionnelle');
    console.log('\nüéØ PROCHAINES √âTAPES:');
    console.log('=====================');
    console.log('1. Tester avec le frontend React');
    console.log('2. V√©rifier la persistance localStorage');
    console.log('3. Cr√©er les dashboards admin/√©tudiant');
};

// Ex√©cuter le test
testNewEndpoints();
