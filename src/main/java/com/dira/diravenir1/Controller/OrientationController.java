package com.dira.diravenir1.Controller;

import com.dira.diravenir1.dto.OrientationRequestDTO;
import com.dira.diravenir1.dto.OrientationResponseDTO;
import com.dira.diravenir1.dto.MajorRecommendationDTO;
import com.dira.diravenir1.dto.UserProfileDTO;
import com.dira.diravenir1.service.OrientationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/orientation")
@CrossOrigin(origins = "*")
public class OrientationController {

    @Autowired
    private OrientationService orientationService;

    /**
     * Endpoint principal pour le calcul d'orientation
     * Re√ßoit les r√©ponses du test et retourne les recommandations
     */
    @PostMapping("/calculate")
    public ResponseEntity<OrientationResponseDTO> calculateOrientation(
            @RequestBody OrientationRequestDTO request) {
        
        try {
            System.out.println("üéØ Contr√¥leur: Calcul d'orientation demand√©");
            System.out.println("üì§ Donn√©es re√ßues: " + request);
            
            OrientationResponseDTO response = orientationService.calculateOrientation(request);
            
            System.out.println("‚úÖ Contr√¥leur: Calcul r√©ussi, " + 
                (response.getTop3Recommendations() != null ? response.getTop3Recommendations().size() : 0) + 
                " recommandations g√©n√©r√©es");
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            System.err.println("‚ùå Contr√¥leur: Erreur lors du calcul: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Endpoint pour obtenir le profil utilisateur calcul√©
     */
    @PostMapping("/profile")
    public ResponseEntity<UserProfileDTO> getUserProfile(
            @RequestBody OrientationRequestDTO request) {
        
        try {
            System.out.println("üë§ Contr√¥leur: Demande de profil utilisateur");
            
            // Utiliser la m√©thode correcte du service
            OrientationResponseDTO response = orientationService.calculateOrientation(request);
            UserProfileDTO profile = response.getUserProfile();
            
            if (profile != null) {
                System.out.println("‚úÖ Contr√¥leur: Profil utilisateur r√©cup√©r√© avec succ√®s");
                return ResponseEntity.ok(profile);
            } else {
                System.err.println("‚ùå Contr√¥leur: Profil utilisateur null dans la r√©ponse");
                return ResponseEntity.badRequest().build();
            }
        } catch (Exception e) {
            System.err.println("‚ùå Contr√¥leur: Erreur lors de la r√©cup√©ration du profil: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Endpoint pour obtenir toutes les majeures disponibles
     */
    @GetMapping("/majors")
    public ResponseEntity<List<String>> getAllMajors() {
        
        try {
            System.out.println("üìö Contr√¥leur: Demande de toutes les majeures");
            
            List<String> majors = orientationService.getAllMajors();
            
            System.out.println("‚úÖ Contr√¥leur: " + majors.size() + " majeures r√©cup√©r√©es");
            
            return ResponseEntity.ok(majors);
        } catch (Exception e) {
            System.err.println("‚ùå Contr√¥leur: Erreur lors de la r√©cup√©ration des majeures: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }

    @GetMapping("/ping")
    public ResponseEntity<String> ping() {
        return ResponseEntity.ok("pong");
    }

    @GetMapping("/test-simple")
    public ResponseEntity<String> testSimple() {
        try {
            System.out.println("üß™ Contr√¥leur: Test simple demand√©");
            return ResponseEntity.ok("API d'orientation fonctionne !");
        } catch (Exception e) {
            System.err.println("‚ùå Contr√¥leur: Erreur lors du test simple: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).body("Erreur: " + e.getMessage());
        }
    }

    /**
     * Endpoint de test avec les r√©ponses d'exemple du document
     */
    @GetMapping("/test-example")
    public ResponseEntity<OrientationResponseDTO> testWithExample() {
        
        try {
            System.out.println("üß™ Contr√¥leur: Test avec exemples demand√©");
            
            // Cr√©er des r√©ponses d'exemple pour tester
            OrientationRequestDTO exampleRequest = createExampleRequest();
            OrientationResponseDTO response = orientationService.calculateOrientation(exampleRequest);
            
            System.out.println("‚úÖ Contr√¥leur: Test avec exemples r√©ussi, " + 
                (response.getTop3Recommendations() != null ? response.getTop3Recommendations().size() : 0) + 
                " recommandations g√©n√©r√©es");
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            System.err.println("‚ùå Contr√¥leur: Erreur lors du test avec exemples: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }
    
    /**
     * Cr√©e une requ√™te d'exemple pour les tests
     */
    private OrientationRequestDTO createExampleRequest() {
        OrientationRequestDTO request = new OrientationRequestDTO();
        
        // Question 1: Int√©r√™t scientifique/technique
        request.setQuestion1("Tr√®s int√©ress√©");
        
        // Question 2: Int√©r√™ts multiples (s√©lection multiple)
        request.setQuestion2(Arrays.asList("Sciences", "Technologie", "Math√©matiques"));
        
        // Question 3: Int√©r√™t artistique/cr√©atif
        request.setQuestion3("Int√©ress√©");
        
        // Question 4: Int√©r√™t social/humain
        request.setQuestion4("Tr√®s int√©ress√©");
        
        // Question 5: Int√©r√™ts sp√©cifiques (drag & drop)
        request.setQuestion5(Arrays.asList("Business", "Gestion", "Leadership"));
        
        // Question 6: Int√©r√™t logique/analytique
        request.setQuestion6("Tr√®s int√©ress√©");
        
        // Question 7: Comp√©tence r√©solution de probl√®mes
        request.setQuestion7("Tr√®s comp√©tent");
        
        // Question 8: Comp√©tence communication
        request.setQuestion8("Comp√©tent");
        
        // Question 9: Pr√©f√©rences de travail (sliders)
        Map<String, Integer> workPrefs = new HashMap<>();
        workPrefs.put("√âquipe", 80);
        workPrefs.put("Autonome", 60);
        workPrefs.put("Pratique", 70);
        workPrefs.put("Th√©orie", 50);
        request.setQuestion9(workPrefs);
        
        // Question 10: Valeur impact soci√©tal
        request.setQuestion10("Tr√®s important");
        
        // Question 11: Valeur innovation/d√©fi
        request.setQuestion11("Important");
        
        // Question 12: Valeur stabilit√©/s√©curit√©
        request.setQuestion12("Mod√©r√©ment important");
        
        // Question 13: Valeur autonomie
        request.setQuestion13("Important");
        
        // Question 14: Comp√©tences organisationnelles
        request.setQuestion14(Arrays.asList("Organisation", "Planification", "Gestion de projet"));
        
        return request;
    }

    /**
     * Endpoint de test de la variabilit√© de l'algorithme
     * V√©rifie que les scores sont vari√©s et r√©alistes
     */
    @GetMapping("/test-algorithm")
    public ResponseEntity<String> testAlgorithmVariability() {
        
        try {
            System.out.println("üß™ Contr√¥leur: Test de variabilit√© de l'algorithme demand√©");
            
            // Utiliser la r√©flexion pour appeler la m√©thode priv√©e
            java.lang.reflect.Method method = orientationService.getClass().getDeclaredMethod("testAlgorithmVariability");
            method.setAccessible(true);
            method.invoke(orientationService);
            
            System.out.println("‚úÖ Contr√¥leur: Test de variabilit√© r√©ussi");
            
            return ResponseEntity.ok("Test de variabilit√© de l'algorithme ex√©cut√© avec succ√®s. V√©rifiez les logs du serveur pour voir les scores vari√©s (30-95%).");
        } catch (Exception e) {
            System.err.println("‚ùå Contr√¥leur: Erreur lors du test de variabilit√©: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).body("Erreur lors du test: " + e.getMessage());
        }
    }
}
