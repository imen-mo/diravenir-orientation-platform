package com.dira.diravenir1.Controller;

import com.dira.diravenir1.dto.OrientationRequestDTO;
import com.dira.diravenir1.dto.OrientationRecommendationDTO;
import com.dira.diravenir1.dto.UserProfileDTO;
import com.dira.diravenir1.dto.MajorProfileDTO;
import com.dira.diravenir1.service.RecommendationService;
import com.dira.diravenir1.service.IdealProfileService;
import com.dira.diravenir1.service.ProfileScoringService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import lombok.extern.slf4j.Slf4j;

import java.util.List;
import java.util.Map;

/**
 * Contr√¥leur d'orientation selon les sp√©cifications exactes
 * du "Syst√®me d'Orientation des √âtudiants".
 * 
 * Ce contr√¥leur g√®re :
 * - Le calcul des profils utilisateur
 * - La g√©n√©ration des recommandations
 * - L'acc√®s aux profils id√©aux des majeures
 * - L'analyse des correspondances
 */
@RestController
@RequestMapping("/api/orientation")
@CrossOrigin(origins = "*")
@Slf4j
public class OrientationController {

    @Autowired
    private RecommendationService recommendationService;
    
    @Autowired
    private IdealProfileService idealProfileService;
    
    @Autowired
    private ProfileScoringService profileScoringService;
    
    /**
     * G√©n√®re les recommandations d'orientation compl√®tes selon les sp√©cifications exactes
     * POST /api/orientation/recommendations
     */
    @PostMapping("/recommendations")
    public ResponseEntity<OrientationRecommendationDTO> generateRecommendations(
            @RequestBody OrientationRequestDTO request) {
        
        log.info("üöÄ Demande de g√©n√©ration de recommandations d'orientation re√ßue");
        log.info("üìù Questions re√ßues : {}", getQuestionsSummary(request));
        
        try {
            long startTime = System.currentTimeMillis();
            
            // G√©n√©ration des recommandations avec l'algorithme euclidien pond√©r√©
            OrientationRecommendationDTO recommendations = recommendationService.generateRecommendations(request);
            
            long endTime = System.currentTimeMillis();
            recommendations.setCalculationTimeMs(endTime - startTime);
            recommendations.setTotalMajorsEvaluated(recommendations.getAllRecommendations().size());
            recommendations.setTotalPillarsAnalyzed(17); // Selon les sp√©cifications exactes
            
            log.info("‚úÖ Recommandations g√©n√©r√©es avec succ√®s en {} ms", endTime - startTime);
            log.info("üèÜ Top recommandation : {} ({}%)", 
                recommendations.getTopRecommendations().get(0).getProgram(),
                Math.round(recommendations.getTopRecommendations().get(0).getMatchingScore()));
            
            return ResponseEntity.ok(recommendations);
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la g√©n√©ration des recommandations", e);
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * Calcule uniquement le profil utilisateur selon la matrice des 17 piliers
     * POST /api/orientation/profile
     */
    @PostMapping("/profile")
    public ResponseEntity<UserProfileDTO> calculateUserProfile(
            @RequestBody OrientationRequestDTO request) {
        
        log.info("üßÆ Demande de calcul de profil utilisateur re√ßue");
        
        try {
            UserProfileDTO userProfile = profileScoringService.calculateProfileFromResponses(request);
            
            log.info("‚úÖ Profil utilisateur calcul√© avec {} piliers", getProfilePillarCount(userProfile));
            log.info("üìä Scores moyens - Int√©r√™ts: {}, Comp√©tences: {}, Valeurs: {}, Pr√©f√©rences: {}", 
                calculateAverageScore(userProfile, "interet"),
                calculateAverageScore(userProfile, "competence"),
                calculateAverageScore(userProfile, "valeur"),
                calculateAverageScore(userProfile, "pref"));
            
            return ResponseEntity.ok(userProfile);
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors du calcul du profil utilisateur", e);
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * Endpoint principal pour le calcul d'orientation (compatibilit√© frontend)
     * POST /api/orientation/calculate
     */
    @PostMapping("/calculate")
    public ResponseEntity<OrientationRecommendationDTO> calculateOrientation(
            @RequestBody OrientationRequestDTO request) {
        
        log.info("üöÄ Demande de calcul d'orientation re√ßue (endpoint /calculate)");
        log.info("üìù Questions re√ßues : {}", getQuestionsSummary(request));
        
        try {
            long startTime = System.currentTimeMillis();
            
            // G√©n√©ration des recommandations avec l'algorithme euclidien pond√©r√©
            OrientationRecommendationDTO recommendations = recommendationService.generateRecommendations(request);
            
            long endTime = System.currentTimeMillis();
            recommendations.setCalculationTimeMs(endTime - startTime);
            recommendations.setTotalMajorsEvaluated(recommendations.getAllRecommendations().size());
            recommendations.setTotalPillarsAnalyzed(17); // Selon les sp√©cifications exactes
            
            log.info("‚úÖ Orientation calcul√©e avec succ√®s en {} ms", endTime - startTime);
            log.info("üèÜ Top recommandation : {} ({}%)", 
                recommendations.getTopRecommendations().get(0).getProgram(),
                Math.round(recommendations.getTopRecommendations().get(0).getMatchingScore()));
            
            return ResponseEntity.ok(recommendations);
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors du calcul d'orientation", e);
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * R√©cup√®re tous les profils id√©aux des majeures disponibles
     * GET /api/orientation/ideal-profiles
     */
    @GetMapping("/ideal-profiles")
    public ResponseEntity<List<MajorProfileDTO>> getAllIdealProfiles() {
        
        log.info("üìö Demande de r√©cup√©ration de tous les profils id√©aux");
        
        try {
            List<MajorProfileDTO> profiles = idealProfileService.getAllMajorProfiles();
            
            log.info("‚úÖ {} profils id√©aux r√©cup√©r√©s avec succ√®s", profiles.size());
            
            return ResponseEntity.ok(profiles);
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la r√©cup√©ration des profils id√©aux", e);
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * R√©cup√®re un profil id√©al sp√©cifique par nom de majeure
     * GET /api/orientation/ideal-profiles/{majorName}
     */
    @GetMapping("/ideal-profiles/{majorName}")
    public ResponseEntity<MajorProfileDTO> getIdealProfile(@PathVariable String majorName) {
        
        log.info("üéØ Demande de profil id√©al pour la majeure : {}", majorName);
        
        try {
            Map<String, Integer> profile = idealProfileService.getIdealProfile(majorName);
            
            if (profile == null) {
                log.warn("‚ö†Ô∏è Profil id√©al non trouv√© pour la majeure : {}", majorName);
                return ResponseEntity.notFound().build();
            }
            
            MajorProfileDTO majorProfile = idealProfileService.convertToMajorProfileDTO(majorName, profile);
            
            log.info("‚úÖ Profil id√©al r√©cup√©r√© pour {} avec {} piliers", majorName, profile.size());
            
            return ResponseEntity.ok(majorProfile);
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la r√©cup√©ration du profil id√©al pour {}", majorName, e);
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * R√©cup√®re les noms de toutes les majeures disponibles
     * GET /api/orientation/majors
     */
    @GetMapping("/majors")
    public ResponseEntity<List<String>> getAllMajorNames() {
        
        log.info("üìã Demande de r√©cup√©ration de tous les noms de majeures");
        
        try {
            List<String> majorNames = idealProfileService.getAllMajorNames();
            
            log.info("‚úÖ {} noms de majeures r√©cup√©r√©s avec succ√®s", majorNames.size());
            
            return ResponseEntity.ok(majorNames);
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la r√©cup√©ration des noms de majeures", e);
            return ResponseEntity.internalServerError().build();
        }
    }
    
    /**
     * V√©rifie si une majeure existe
     * GET /api/orientation/majors/{majorName}/exists
     */
    @GetMapping("/majors/{majorName}/exists")
    public ResponseEntity<Map<String, Boolean>> checkMajorExists(@PathVariable String majorName) {
        
        log.info("üîç V√©rification de l'existence de la majeure : {}", majorName);
        
        try {
            boolean exists = idealProfileService.majorExists(majorName);
            
            log.info("‚úÖ Majeure '{}' existe : {}", majorName, exists);
            
            return ResponseEntity.ok(Map.of("exists", exists));
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la v√©rification de l'existence de la majeure {}", majorName, e);
            return ResponseEntity.internalServerError().build();
        }
    }
    
    /**
     * R√©cup√®re les statistiques des profils id√©aux
     * GET /api/orientation/statistics
     */
    @GetMapping("/statistics")
    public ResponseEntity<Map<String, Object>> getProfileStatistics() {
        
        log.info("üìä Demande de statistiques des profils id√©aux");
        
        try {
            int totalProfiles = idealProfileService.getTotalProfilesCount();
            List<String> majorNames = idealProfileService.getAllMajorNames();
            
            Map<String, Object> stats = Map.of(
                "totalProfiles", totalProfiles,
                "totalMajors", majorNames.size(),
                "algorithmVersion", "2.0",
                "scoringMatrix", "17 Pillars Matrix v2.0",
                "matchingAlgorithm", "Euclidean Distance Weighted",
                "normalizationMethod", "0-100 Scale"
            );
            
            log.info("‚úÖ Statistiques r√©cup√©r√©es : {} profils, {} majeures", totalProfiles, majorNames.size());
            
            return ResponseEntity.ok(stats);
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la r√©cup√©ration des statistiques", e);
            return ResponseEntity.internalServerError().build();
        }
    }
    
    /**
     * Test de sant√© du syst√®me d'orientation
     * GET /api/orientation/health
     */
    @GetMapping("/health")
    public ResponseEntity<Map<String, Object>> healthCheck() {
        
        log.info("üè• V√©rification de la sant√© du syst√®me d'orientation");
        
        try {
            int totalProfiles = idealProfileService.getTotalProfilesCount();
            List<String> majorNames = idealProfileService.getAllMajorNames();
            
            Map<String, Object> health = Map.of(
                "status", "HEALTHY",
                "timestamp", System.currentTimeMillis(),
                "totalProfiles", totalProfiles,
                "totalMajors", majorNames.size(),
                "algorithmVersion", "2.0",
                "scoringMatrix", "17 Pillars Matrix v2.0",
                "matchingAlgorithm", "Euclidean Distance Weighted"
            );
            
            log.info("‚úÖ Syst√®me d'orientation en bonne sant√© : {} profils, {} majeures", totalProfiles, majorNames.size());
            
            return ResponseEntity.ok(health);
            
        } catch (Exception e) {
            log.error("‚ùå Syst√®me d'orientation en mauvaise sant√©", e);
            
            Map<String, Object> health = Map.of(
                "status", "UNHEALTHY",
                "timestamp", System.currentTimeMillis(),
                "error", e.getMessage()
            );
            
            return ResponseEntity.status(503).body(health);
        }
    }
    
    // ===== M√âTHODES UTILITAIRES =====
    
    /**
     * G√©n√®re un r√©sum√© des questions re√ßues pour le logging
     */
    private String getQuestionsSummary(OrientationRequestDTO request) {
        if (request == null) return "Aucune question";
        
        StringBuilder summary = new StringBuilder();
        summary.append("Q1:").append(request.getQuestion1() != null ? request.getQuestion1() : "null").append(", ");
        summary.append("Q2:").append(request.getQuestion2() != null ? request.getQuestion2().size() : "0").append(" r√©ponses, ");
        summary.append("Q3:").append(request.getQuestion3() != null ? request.getQuestion3() : "null").append(", ");
        summary.append("Q4:").append(request.getQuestion4() != null ? request.getQuestion4() : "null").append(", ");
        summary.append("Q5:").append(request.getQuestion5() != null ? request.getQuestion5().size() : "0").append(" r√©ponses, ");
        summary.append("Q6:").append(request.getQuestion6() != null ? request.getQuestion6() : "null").append(", ");
        summary.append("Q7:").append(request.getQuestion7() != null ? request.getQuestion7() : "null").append(", ");
        summary.append("Q8:").append(request.getQuestion8() != null ? request.getQuestion8() : "null").append(", ");
        summary.append("Q9:").append(request.getQuestion9() != null ? request.getQuestion9().size() : "0").append(" curseurs, ");
        summary.append("Q10:").append(request.getQuestion10() != null ? request.getQuestion10() : "null").append(", ");
        summary.append("Q11:").append(request.getQuestion11() != null ? request.getQuestion11() : "null").append(", ");
        summary.append("Q12:").append(request.getQuestion12() != null ? request.getQuestion12() : "null").append(", ");
        summary.append("Q13:").append(request.getQuestion13() != null ? request.getQuestion13() : "null").append(", ");
        summary.append("Q14:").append(request.getQuestion14() != null ? request.getQuestion14().size() : "0").append(" mati√®res");
        
        return summary.toString();
    }
    
    /**
     * Compte le nombre de piliers dans le profil utilisateur
     */
    private int getProfilePillarCount(UserProfileDTO userProfile) {
        if (userProfile == null) return 0;
        
        int count = 0;
        if (userProfile.getInteretScientifiqueTech() > 0) count++;
        if (userProfile.getInteretArtistiqueCreatif() > 0) count++;
        if (userProfile.getInteretSocialHumain() > 0) count++;
        if (userProfile.getInteretBusinessGestion() > 0) count++;
        if (userProfile.getInteretLogiqueAnalytique() > 0) count++;
        if (userProfile.getCompetenceResolutionProblemes() > 0) count++;
        if (userProfile.getCompetenceCommunication() > 0) count++;
        if (userProfile.getCompetenceOrganisation() > 0) count++;
        if (userProfile.getCompetenceManuelTechnique() > 0) count++;
        if (userProfile.getValeurImpactSocietal() > 0) count++;
        if (userProfile.getValeurInnovationChallenge() > 0) count++;
        if (userProfile.getValeurStabiliteSecurite() > 0) count++;
        if (userProfile.getValeurAutonomie() > 0) count++;
        if (userProfile.getPrefTravailEquipeCollab() > 0) count++;
        if (userProfile.getPrefTravailAutonome() > 0) count++;
        if (userProfile.getPrefPratiqueTerrain() > 0) count++;
        if (userProfile.getPrefTheorieRecherche() > 0) count++;
        return count;
    }
    
    /**
     * Calcule le score moyen pour une cat√©gorie de piliers
     */
    private double calculateAverageScore(UserProfileDTO userProfile, String category) {
        if (userProfile == null) return 0.0;
        
        double sum = 0.0;
        int count = 0;
        
        switch (category.toLowerCase()) {
            case "interet":
                sum += getScoreOrZero(userProfile.getInteretScientifiqueTech());
                sum += getScoreOrZero(userProfile.getInteretArtistiqueCreatif());
                sum += getScoreOrZero(userProfile.getInteretSocialHumain());
                sum += getScoreOrZero(userProfile.getInteretBusinessGestion());
                sum += getScoreOrZero(userProfile.getInteretLogiqueAnalytique());
                count = 5;
                break;
            case "competence":
                sum += getScoreOrZero(userProfile.getCompetenceResolutionProblemes());
                sum += getScoreOrZero(userProfile.getCompetenceCommunication());
                sum += getScoreOrZero(userProfile.getCompetenceOrganisation());
                sum += getScoreOrZero(userProfile.getCompetenceManuelTechnique());
                count = 4;
                break;
            case "valeur":
                sum += getScoreOrZero(userProfile.getValeurImpactSocietal());
                sum += getScoreOrZero(userProfile.getValeurInnovationChallenge());
                sum += getScoreOrZero(userProfile.getValeurStabiliteSecurite());
                sum += getScoreOrZero(userProfile.getValeurAutonomie());
                count = 4;
                break;
            case "pref":
                sum += getScoreOrZero(userProfile.getPrefTravailEquipeCollab());
                sum += getScoreOrZero(userProfile.getPrefTravailAutonome());
                sum += getScoreOrZero(userProfile.getPrefPratiqueTerrain());
                sum += getScoreOrZero(userProfile.getPrefTheorieRecherche());
                count = 4;
                break;
        }
        
        return count > 0 ? sum / count : 0.0;
    }
    
    /**
     * R√©cup√®re le score ou 0 si null
     */
    private double getScoreOrZero(int score) {
        return score;
    }
}
