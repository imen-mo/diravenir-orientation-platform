package com.dira.diravenir1.Controller;

import com.dira.diravenir1.dto.OrientationRequestDTO;
import com.dira.diravenir1.dto.OrientationResponseDTO;
import com.dira.diravenir1.dto.MajorRecommendationDTO;
import com.dira.diravenir1.dto.UserProfileDTO;
import com.dira.diravenir1.service.OrientationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/orientation")
@CrossOrigin(origins = "*")
public class OrientationController {

    @Autowired
    private OrientationService orientationService;

    /**
     * Endpoint principal pour le calcul d'orientation
     * Re√ßoit les r√©ponses du test et retourne les recommandations
     */
    @PostMapping("/calculate")
    public ResponseEntity<OrientationResponseDTO> calculateOrientation(
            @RequestBody OrientationRequestDTO request) {
        
        try {
            System.out.println("üéØ Contr√¥leur: Calcul d'orientation demand√©");
            System.out.println("üì§ Donn√©es re√ßues: " + request);
            
            OrientationResponseDTO response = orientationService.calculateOrientation(request);
            
            System.out.println("‚úÖ Contr√¥leur: Calcul r√©ussi, " + 
                (response.getTop3Recommendations() != null ? response.getTop3Recommendations().size() : 0) + 
                " recommandations g√©n√©r√©es");
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            System.err.println("‚ùå Contr√¥leur: Erreur lors du calcul: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Endpoint pour obtenir le profil utilisateur calcul√©
     */
    @PostMapping("/profile")
    public ResponseEntity<UserProfileDTO> getUserProfile(
            @RequestBody OrientationRequestDTO request) {
        
        try {
            System.out.println("üë§ Contr√¥leur: Demande de profil utilisateur");
            
            // Utiliser la m√©thode correcte du service
            OrientationResponseDTO response = orientationService.calculateOrientation(request);
            UserProfileDTO profile = response.getUserProfile();
            
            if (profile != null) {
                System.out.println("‚úÖ Contr√¥leur: Profil utilisateur r√©cup√©r√© avec succ√®s");
                return ResponseEntity.ok(profile);
            } else {
                System.err.println("‚ùå Contr√¥leur: Profil utilisateur null dans la r√©ponse");
                return ResponseEntity.badRequest().build();
            }
        } catch (Exception e) {
            System.err.println("‚ùå Contr√¥leur: Erreur lors de la r√©cup√©ration du profil: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Endpoint pour obtenir toutes les majeures disponibles
     */
    @GetMapping("/majors")
    public ResponseEntity<List<MajorRecommendationDTO>> getAllMajors() {
        
        try {
            System.out.println("üìö Contr√¥leur: Demande de toutes les majeures");
            
            List<MajorRecommendationDTO> majors = orientationService.getAllMajors();
            
            System.out.println("‚úÖ Contr√¥leur: " + majors.size() + " majeures r√©cup√©r√©es");
            
            return ResponseEntity.ok(majors);
        } catch (Exception e) {
            System.err.println("‚ùå Contr√¥leur: Erreur lors de la r√©cup√©ration des majeures: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }

    @GetMapping("/ping")
    public ResponseEntity<String> ping() {
        return ResponseEntity.ok("pong");
    }

    @GetMapping("/test-simple")
    public ResponseEntity<String> testSimple() {
        try {
            System.out.println("üß™ Contr√¥leur: Test simple demand√©");
            return ResponseEntity.ok("API d'orientation fonctionne !");
        } catch (Exception e) {
            System.err.println("‚ùå Contr√¥leur: Erreur lors du test simple: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).body("Erreur: " + e.getMessage());
        }
    }

    /**
     * Endpoint de test avec les r√©ponses d'exemple du document
     */
    @GetMapping("/test-example")
    public ResponseEntity<OrientationResponseDTO> testWithExample() {
        
        try {
            System.out.println("üß™ Contr√¥leur: Test avec exemples demand√©");
            
            OrientationResponseDTO response = orientationService.testWithExampleAnswers();
            
            System.out.println("‚úÖ Contr√¥leur: Test avec exemples r√©ussi, " + 
                (response.getTop3Recommendations() != null ? response.getTop3Recommendations().size() : 0) + 
                " recommandations g√©n√©r√©es");
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            System.err.println("‚ùå Contr√¥leur: Erreur lors du test avec exemples: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }
}
