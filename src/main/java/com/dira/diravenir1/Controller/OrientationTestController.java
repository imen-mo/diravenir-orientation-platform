package com.dira.diravenir1.Controller;

import com.dira.diravenir1.dto.OrientationRequestDTO;
import com.dira.diravenir1.dto.UserProfileDTO;
import com.dira.diravenir1.dto.OrientationRecommendationDTO;
import com.dira.diravenir1.dto.MatchingResultDTO;
import com.dira.diravenir1.dto.MajorProfileDTO;
import com.dira.diravenir1.service.MajorDescriptionService;
import com.dira.diravenir1.service.ProfileScoringService;
import com.dira.diravenir1.service.RecommendationService;
import com.dira.diravenir1.service.IdealProfileService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Contr√¥leur de test pour valider le syst√®me d'orientation complet.
 * 
 * Ce contr√¥leur permet de tester :
 * - Le calcul des profils utilisateur
 * - La g√©n√©ration des recommandations
 * - Les descriptions personnalis√©es des majeures
 */
@Slf4j
@RestController
@RequestMapping("/api/test/orientation")
@CrossOrigin(origins = "*")
public class OrientationTestController {

    @Autowired
    private ProfileScoringService profileScoringService;

    @Autowired
    private RecommendationService recommendationService;

    @Autowired
    private MajorDescriptionService majorDescriptionService;
    
    @Autowired
    private IdealProfileService idealProfileService;

    /**
     * Test complet du syst√®me d'orientation
     */
    @PostMapping("/test-complete")
    public ResponseEntity<Map<String, Object>> testCompleteSystem(@RequestBody OrientationRequestDTO request) {
        log.info("üß™ Test complet du syst√®me d'orientation");
        
        try {
            Map<String, Object> result = new HashMap<>();
            
            // 1. Calcul du profil utilisateur
            log.info("üìä Calcul du profil utilisateur...");
            UserProfileDTO userProfile = profileScoringService.calculateProfileFromResponses(request);
            result.put("userProfile", userProfile);
            
            // 2. G√©n√©ration des recommandations
            log.info("üéØ G√©n√©ration des recommandations...");
            OrientationRecommendationDTO recommendations = recommendationService.generateRecommendations(request);
            result.put("recommendations", recommendations);
            
            // 3. Test des descriptions personnalis√©es pour les top 3
            if (recommendations != null && recommendations.getTopRecommendations() != null && !recommendations.getTopRecommendations().isEmpty()) {
                log.info("üìù G√©n√©ration des descriptions personnalis√©es...");
                Map<String, String> personalizedDescriptions = new HashMap<>();
                
                // Test avec les 3 premi√®res recommandations
                List<MatchingResultDTO> topRecs = recommendations.getTopRecommendations();
                for (int i = 0; i < Math.min(3, topRecs.size()); i++) {
                    MatchingResultDTO rec = topRecs.get(i);
                    String majorName = rec.getProgram();
                    Double score = rec.getMatchingScore();
                    
                    if (majorName != null && score != null) {
                        String description = majorDescriptionService.generatePersonalizedDescription(
                            majorName, 
                            score / 100.0, 
                            userProfile
                        );
                        personalizedDescriptions.put(majorName, description);
                    }
                }
                result.put("personalizedDescriptions", personalizedDescriptions);
            }
            
            result.put("status", "success");
            result.put("message", "Test complet r√©ussi");
            
            log.info("‚úÖ Test complet r√©ussi");
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors du test complet: {}", e.getMessage(), e);
            Map<String, Object> error = new HashMap<>();
            error.put("status", "error");
            error.put("message", "Erreur lors du test: " + e.getMessage());
            return ResponseEntity.badRequest().body(error);
        }
    }

    /**
     * Test du calcul de profil utilisateur uniquement
     */
    @PostMapping("/test-profile")
    public ResponseEntity<Map<String, Object>> testProfileCalculation(@RequestBody OrientationRequestDTO request) {
        log.info("üß™ Test du calcul de profil utilisateur");
        
        try {
            UserProfileDTO userProfile = profileScoringService.calculateProfileFromResponses(request);
            
            Map<String, Object> result = new HashMap<>();
            result.put("status", "success");
            result.put("userProfile", userProfile);
            result.put("message", "Profil utilisateur calcul√© avec succ√®s");
            
            log.info("‚úÖ Profil utilisateur calcul√© avec succ√®s");
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors du calcul du profil: {}", e.getMessage(), e);
            Map<String, Object> error = new HashMap<>();
            error.put("status", "error");
            error.put("message", "Erreur lors du calcul du profil: " + e.getMessage());
            return ResponseEntity.badRequest().body(error);
        }
    }

    /**
     * Test des recommandations uniquement
     */
    @PostMapping("/test-recommendations")
    public ResponseEntity<Map<String, Object>> testRecommendations(@RequestBody OrientationRequestDTO request) {
        log.info("üß™ Test des recommandations");
        
        try {
            OrientationRecommendationDTO recommendations = recommendationService.generateRecommendations(request);
            
            Map<String, Object> result = new HashMap<>();
            result.put("status", "success");
            result.put("recommendations", recommendations);
            result.put("count", recommendations.getAllRecommendations() != null ? recommendations.getAllRecommendations().size() : 0);
            result.put("message", "Recommandations g√©n√©r√©es avec succ√®s");
            
            log.info("‚úÖ {} recommandations g√©n√©r√©es avec succ√®s", 
                recommendations.getAllRecommendations() != null ? recommendations.getAllRecommendations().size() : 0);
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la g√©n√©ration des recommandations: {}", e.getMessage(), e);
            Map<String, Object> error = new HashMap<>();
            error.put("status", "error");
            error.put("message", "Erreur lors de la g√©n√©ration des recommandations: " + e.getMessage());
            return ResponseEntity.badRequest().body(error);
        }
    }

    /**
     * Test des descriptions personnalis√©es
     */
    @PostMapping("/test-descriptions")
    public ResponseEntity<Map<String, Object>> testDescriptions(
            @RequestParam String majorName,
            @RequestParam double matchingScore,
            @RequestBody UserProfileDTO userProfile) {
        
        log.info("üß™ Test des descriptions personnalis√©es pour: {}", majorName);
        
        try {
            String description = majorDescriptionService.generatePersonalizedDescription(
                majorName, 
                matchingScore, 
                userProfile
            );
            
            Map<String, Object> result = new HashMap<>();
            result.put("status", "success");
            result.put("majorName", majorName);
            result.put("matchingScore", matchingScore);
            result.put("description", description);
            result.put("message", "Description personnalis√©e g√©n√©r√©e avec succ√®s");
            
            log.info("‚úÖ Description personnalis√©e g√©n√©r√©e avec succ√®s");
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la g√©n√©ration de la description: {}", e.getMessage(), e);
            Map<String, Object> error = new HashMap<>();
            error.put("status", "error");
            error.put("message", "Erreur lors de la g√©n√©ration de la description: " + e.getMessage());
            return ResponseEntity.badRequest().body(error);
        }
    }

    /**
     * Test de sant√© du syst√®me
     */
    @GetMapping("/health")
    public ResponseEntity<Map<String, Object>> healthCheck() {
        log.info("üè• V√©rification de la sant√© du syst√®me d'orientation");
        
        Map<String, Object> health = new HashMap<>();
        health.put("status", "healthy");
        health.put("service", "Orientation System");
        health.put("timestamp", System.currentTimeMillis());
        health.put("components", List.of(
            "ProfileScoringService",
            "RecommendationService", 
            "MajorDescriptionService"
        ));
        
        return ResponseEntity.ok(health);
    }

    /**
     * Test avec des donn√©es d'exemple
     */
    @GetMapping("/test-example")
    public ResponseEntity<Map<String, Object>> testWithExampleData() {
        log.info("üß™ Test avec des donn√©es d'exemple");
        
        try {
            // Cr√©ation d'un exemple de questionnaire
            OrientationRequestDTO exampleRequest = createExampleRequest();
            
            // Test complet
            Map<String, Object> result = new HashMap<>();
            result.put("exampleRequest", exampleRequest);
            result.put("message", "Donn√©es d'exemple cr√©√©es. Utilisez /test-complete pour tester le syst√®me complet.");
            
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la cr√©ation des donn√©es d'exemple: {}", e.getMessage(), e);
            Map<String, Object> error = new HashMap<>();
            error.put("status", "error");
            error.put("message", "Erreur lors de la cr√©ation des donn√©es d'exemple: " + e.getMessage());
            return ResponseEntity.badRequest().body(error);
        }
    }

    /**
     * Test simple de l'endpoint d'orientation - ACC√àS PUBLIC
     */
    @GetMapping("/test-simple")
    public ResponseEntity<Map<String, Object>> testSimple() {
        log.info("üß™ Test simple du syst√®me d'orientation");
        
        Map<String, Object> result = new HashMap<>();
        result.put("status", "success");
        result.put("message", "Syst√®me d'orientation accessible");
        result.put("timestamp", java.time.LocalDateTime.now().toString());
        result.put("endpoints", List.of(
            "/api/orientation/majors",
            "/api/orientation/ideal-profiles",
            "/api/orientation/recommendations",
            "/api/orientation/profile"
        ));
        
        return ResponseEntity.ok(result);
    }

    /**
     * Test de r√©cup√©ration des majeures - ACC√àS PUBLIC
     */
    @GetMapping("/test-majors")
    public ResponseEntity<Map<String, Object>> testMajors() {
        log.info("üìö Test de r√©cup√©ration des majeures");
        
        try {
            // Utiliser le service IdealProfileService pour r√©cup√©rer les majeures
            List<String> majorNames = idealProfileService.getAllMajorNames();
            
            Map<String, Object> result = new HashMap<>();
            result.put("status", "success");
            result.put("message", "Majeures r√©cup√©r√©es avec succ√®s");
            result.put("count", majorNames.size());
            result.put("majors", majorNames);
            result.put("timestamp", java.time.LocalDateTime.now().toString());
            
            log.info("‚úÖ {} majeures r√©cup√©r√©es avec succ√®s", majorNames.size());
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la r√©cup√©ration des majeures: {}", e.getMessage(), e);
            Map<String, Object> error = new HashMap<>();
            error.put("status", "error");
            error.put("message", "Erreur lors de la r√©cup√©ration des majeures: " + e.getMessage());
            return ResponseEntity.badRequest().body(error);
        }
    }

    /**
     * Test de r√©cup√©ration des profils id√©aux - ACC√àS PUBLIC
     */
    @GetMapping("/test-ideal-profiles")
    public ResponseEntity<Map<String, Object>> testIdealProfiles() {
        log.info("üéØ Test de r√©cup√©ration des profils id√©aux");
        
        try {
            // Utiliser le service IdealProfileService pour r√©cup√©rer les profils
            List<MajorProfileDTO> profiles = idealProfileService.getAllMajorProfiles();
            
            Map<String, Object> result = new HashMap<>();
            result.put("status", "success");
            result.put("message", "Profils id√©aux r√©cup√©r√©s avec succ√®s");
            result.put("count", profiles.size());
            result.put("profiles", profiles);
            result.put("timestamp", java.time.LocalDateTime.now().toString());
            
            log.info("‚úÖ {} profils id√©aux r√©cup√©r√©s avec succ√®s", profiles.size());
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la r√©cup√©ration des profils id√©aux: {}", e.getMessage(), e);
            Map<String, Object> error = new HashMap<>();
            error.put("status", "error");
            error.put("message", "Erreur lors de la r√©cup√©ration des profils id√©aux: " + e.getMessage());
            return ResponseEntity.badRequest().body(error);
        }
    }

    /**
     * Cr√©e un exemple de questionnaire pour les tests
     */
    private OrientationRequestDTO createExampleRequest() {
        OrientationRequestDTO request = new OrientationRequestDTO();
        
        // Question 1: Cr√©er quelque chose de nouveau
        request.setQuestion1("A");
        
        // Question 2: Contenu internet pr√©f√©r√©
        request.setQuestion2(List.of("d√©couvertes scientifiques", "technologie et innovation", "art et culture"));
        
        // Question 3: Section magasin pr√©f√©r√©e
        request.setQuestion3("A");
        
        // Question 4: R√©action face √† un probl√®me
        request.setQuestion4("A");
        
        // Question 5: Activit√©s naturelles
        request.setQuestion5(List.of("r√©soudre une √©quation complexe", "r√©parer un appareil", "dessiner ou peindre"));
        
        // Question 6: Pr√©f√©rence d'apprentissage
        request.setQuestion6("A");
        
        // Question 7: Type d'impact souhait√©
        request.setQuestion7("B");
        
        // Question 8: Environnement de travail
        request.setQuestion8("A");
        
        // Question 9: Crit√®res de carri√®re
        Map<String, Integer> careerCriteria = new HashMap<>();
        careerCriteria.put("securite", 3);
        careerCriteria.put("innovation", 5);
        careerCriteria.put("autonomie", 4);
        careerCriteria.put("salaire", 2);
        request.setQuestion9(careerCriteria);
        
        // Question 10: Motivation pour r√©soudre un probl√®me
        request.setQuestion10("A");
        
        // Question 11: Pr√©f√©rence de travail
        request.setQuestion11("B");
        
        // Question 12: Style de pr√©sentation
        request.setQuestion12("A");
        
        // Question 13: Prise de d√©cision
        request.setQuestion13("A");
        
        // Question 14: Mati√®res pr√©f√©r√©es
        request.setQuestion14(List.of("sciences", "technologie et informatique"));
        
        return request;
    }
}
