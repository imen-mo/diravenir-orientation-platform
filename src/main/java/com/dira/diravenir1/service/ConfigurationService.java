package com.dira.diravenir1.service;

import com.dira.diravenir1.config.AlgorithmWeightsConfig;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import lombok.extern.slf4j.Slf4j;

import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

/**
 * Service de configuration qui g√®re tous les param√®tres configurables de l'algorithme.
 * 
 * Ce service respecte le principe OCP en √©tant extensible sans modification :
 * - Charge la configuration depuis les fichiers de propri√©t√©s
 * - Fournit des valeurs par d√©faut pour tous les param√®tres
 * - Permet la modification dynamique de la configuration
 * - Centralise toute la logique de configuration
 * 
 * Avantages :
 * - Configuration centralis√©e et coh√©rente
 * - Valeurs par d√©faut robustes
 * - Modification dynamique possible
 * - Facilement testable
 */
@Service
@Slf4j
public class ConfigurationService {
    
    @Autowired
    private AlgorithmWeightsConfig algorithmWeightsConfig;
    
    // Configuration par d√©faut des strat√©gies de matching
    private final Map<String, Boolean> defaultStrategyConfig = new HashMap<>();
    
    // Configuration par d√©faut des calculateurs de scores
    private final Map<String, Boolean> defaultCalculatorConfig = new HashMap<>();
    
    // Configuration par d√©faut des moteurs de recommandation
    private final Map<String, Boolean> defaultEngineConfig = new HashMap<>();
    
    public ConfigurationService() {
        initializeDefaultConfigurations();
    }
    
    /**
     * Initialise les configurations par d√©faut
     */
    private void initializeDefaultConfigurations() {
        // Strat√©gies de matching par d√©faut
        defaultStrategyConfig.put("EuclideanMatchingStrategy", true);
        defaultStrategyConfig.put("HybridMatchingStrategy", true);
        defaultStrategyConfig.put("SimpleMatchingStrategy", false); // D√©sactiv√©e par d√©faut
        
        // Calculateurs de scores par d√©faut
        defaultCalculatorConfig.put("EuclideanScoreCalculator", true);
        defaultCalculatorConfig.put("ForceAnalysisCalculator", true);
        defaultCalculatorConfig.put("CriticalPillarCalculator", true);
        
        // Moteurs de recommandation par d√©faut
        defaultEngineConfig.put("Top3RecommendationEngine", true);
        defaultEngineConfig.put("DetailedAnalysisGenerator", true);
    }
    
    /**
     * Retourne la configuration des poids des algorithmes
     */
    public AlgorithmWeightsConfig getAlgorithmWeights() {
        return algorithmWeightsConfig;
    }
    
    /**
     * Retourne le poids d'une strat√©gie de matching
     */
    public double getMatchingStrategyWeight(String strategyName) {
        if (strategyName == null) return 0.0;
        
        switch (strategyName) {
            case "EuclideanMatchingStrategy":
                return algorithmWeightsConfig.getEuclideanWeight();
            case "HybridMatchingStrategy":
                return algorithmWeightsConfig.getForceAnalysisWeight(); // Utilise le poids des forces
            case "SimpleMatchingStrategy":
                return algorithmWeightsConfig.getCriticalPillarWeight(); // Utilise le poids des piliers
            default:
                log.warn("‚ö†Ô∏è Poids inconnu pour la strat√©gie : {}", strategyName);
                return 0.0;
        }
    }
    
    /**
     * Retourne le poids d'un calculateur de score
     */
    public double getScoreCalculatorWeight(String calculatorName) {
        if (calculatorName == null) return 0.0;
        
        switch (calculatorName) {
            case "EuclideanScoreCalculator":
                return algorithmWeightsConfig.getEuclideanWeight();
            case "ForceAnalysisCalculator":
                return algorithmWeightsConfig.getForceAnalysisWeight();
            case "CriticalPillarCalculator":
                return algorithmWeightsConfig.getCriticalPillarWeight();
            default:
                log.warn("‚ö†Ô∏è Poids inconnu pour le calculateur : {}", calculatorName);
                return 0.0;
        }
    }
    
    /**
     * V√©rifie si une strat√©gie de matching est activ√©e
     */
    public boolean isMatchingStrategyEnabled(String strategyName) {
        return defaultStrategyConfig.getOrDefault(strategyName, false);
    }
    
    /**
     * Active ou d√©sactive une strat√©gie de matching
     */
    public void setMatchingStrategyEnabled(String strategyName, boolean enabled) {
        defaultStrategyConfig.put(strategyName, enabled);
        log.info("üîß Strat√©gie de matching {} {}", strategyName, enabled ? "activ√©e" : "d√©sactiv√©e");
    }
    
    /**
     * V√©rifie si un calculateur de score est activ√©
     */
    public boolean isScoreCalculatorEnabled(String calculatorName) {
        return defaultCalculatorConfig.getOrDefault(calculatorName, false);
    }
    
    /**
     * Active ou d√©sactive un calculateur de score
     */
    public void setScoreCalculatorEnabled(String calculatorName, boolean enabled) {
        defaultCalculatorConfig.put(calculatorName, enabled);
        log.info("üîß Calculateur de score {} {}", calculatorName, enabled ? "activ√©" : "d√©sactiv√©");
    }
    
    /**
     * V√©rifie si un moteur de recommandation est activ√©
     */
    public boolean isRecommendationEngineEnabled(String engineName) {
        return defaultEngineConfig.getOrDefault(engineName, false);
    }
    
    /**
     * Active ou d√©sactive un moteur de recommandation
     */
    public void setRecommendationEngineEnabled(String engineName, boolean enabled) {
        defaultEngineConfig.put(engineName, enabled);
        log.info("üîß Moteur de recommandation {} {}", engineName, enabled ? "activ√©" : "d√©sactiv√©");
    }
    
    /**
     * Retourne la liste des strat√©gies de matching configur√©es
     */
    public List<String> getConfiguredMatchingStrategies() {
        return new ArrayList<>(defaultStrategyConfig.keySet());
    }
    
    /**
     * Retourne la liste des calculateurs de scores configur√©s
     */
    public List<String> getConfiguredScoreCalculators() {
        return new ArrayList<>(defaultCalculatorConfig.keySet());
    }
    
    /**
     * Retourne la liste des moteurs de recommandation configur√©s
     */
    public List<String> getConfiguredRecommendationEngines() {
        return new ArrayList<>(defaultEngineConfig.keySet());
    }
    
    /**
     * Retourne la configuration compl√®te actuelle
     */
    public Map<String, Object> getCurrentConfiguration() {
        Map<String, Object> config = new HashMap<>();
        
        // Configuration des poids
        config.put("algorithmWeights", algorithmWeightsConfig);
        
        // Configuration des strat√©gies
        config.put("matchingStrategies", new HashMap<>(defaultStrategyConfig));
        
        // Configuration des calculateurs
        config.put("scoreCalculators", new HashMap<>(defaultCalculatorConfig));
        
        // Configuration des moteurs
        config.put("recommendationEngines", new HashMap<>(defaultEngineConfig));
        
        return config;
    }
    
    /**
     * Applique une configuration compl√®te
     */
    public void applyConfiguration(Map<String, Object> config) {
        try {
            log.info("üîß Application d'une nouvelle configuration");
            
            // Application des strat√©gies
            if (config.containsKey("matchingStrategies")) {
                @SuppressWarnings("unchecked")
                Map<String, Boolean> strategies = (Map<String, Boolean>) config.get("matchingStrategies");
                defaultStrategyConfig.putAll(strategies);
            }
            
            // Application des calculateurs
            if (config.containsKey("scoreCalculators")) {
                @SuppressWarnings("unchecked")
                Map<String, Boolean> calculators = (Map<String, Boolean>) config.get("scoreCalculators");
                defaultCalculatorConfig.putAll(calculators);
            }
            
            // Application des moteurs
            if (config.containsKey("recommendationEngines")) {
                @SuppressWarnings("unchecked")
                Map<String, Boolean> engines = (Map<String, Boolean>) config.get("recommendationEngines");
                defaultEngineConfig.putAll(engines);
            }
            
            log.info("‚úÖ Configuration appliqu√©e avec succ√®s");
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de l'application de la configuration : {}", e.getMessage(), e);
        }
    }
    
    /**
     * R√©initialise la configuration aux valeurs par d√©faut
     */
    public void resetToDefaults() {
        log.info("üîÑ R√©initialisation de la configuration aux valeurs par d√©faut");
        initializeDefaultConfigurations();
    }
    
    /**
     * Valide la configuration actuelle
     */
    public boolean validateConfiguration() {
        try {
            // V√©rification que les poids des calculateurs somment √† 1.0
            double totalWeight = algorithmWeightsConfig.getEuclideanWeight() +
                                algorithmWeightsConfig.getForceAnalysisWeight() +
                                algorithmWeightsConfig.getCriticalPillarWeight();
            
            if (Math.abs(totalWeight - 1.0) > 0.01) {
                log.warn("‚ö†Ô∏è La somme des poids des calculateurs n'est pas √©gale √† 1.0 : {}", totalWeight);
                return false;
            }
            
            // V√©rification qu'au moins une strat√©gie est activ√©e
            boolean hasActiveStrategy = defaultStrategyConfig.values().stream().anyMatch(enabled -> enabled);
            if (!hasActiveStrategy) {
                log.warn("‚ö†Ô∏è Aucune strat√©gie de matching n'est activ√©e");
                return false;
            }
            
            // V√©rification qu'au moins un calculateur est activ√©
            boolean hasActiveCalculator = defaultCalculatorConfig.values().stream().anyMatch(enabled -> enabled);
            if (!hasActiveCalculator) {
                log.warn("‚ö†Ô∏è Aucun calculateur de score n'est activ√©");
                return false;
            }
            
            log.info("‚úÖ Configuration valid√©e avec succ√®s");
            return true;
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la validation de la configuration : {}", e.getMessage(), e);
            return false;
        }
    }
}
