package com.dira.diravenir1.service.engines;

import com.dira.diravenir1.dto.Recommendation;
import com.dira.diravenir1.dto.MatchingResult;
import com.dira.diravenir1.service.interfaces.RecommendationEngine;
import org.springframework.stereotype.Component;
import lombok.extern.slf4j.Slf4j;

import java.util.List;
import java.util.ArrayList;

/**
 * Moteur de recommandation par d√©faut qui g√©n√®re des recommandations basiques
 * bas√©es sur les scores de matching.
 * 
 * Cette impl√©mentation respecte le principe OCP en fournissant une fonctionnalit√©
 * de base qui peut √™tre √©tendue par d'autres moteurs.
 */
@Component
@Slf4j
public class DefaultRecommendationEngine implements RecommendationEngine {
    
    @Override
    public List<Recommendation> generate(List<MatchingResult> matchingResults) {
        try {
            log.debug("üîÑ G√©n√©ration des recommandations par d√©faut pour {} majeures", matchingResults.size());
            
            List<Recommendation> recommendations = new ArrayList<>();
            
            for (int i = 0; i < matchingResults.size(); i++) {
                MatchingResult result = matchingResults.get(i);
                Recommendation recommendation = new Recommendation();
                recommendation.setProgram(result.getProgram());
                recommendation.setCategory(result.getCategory());
                recommendation.setMatchScore(result.getGlobalScore());
                recommendation.setRank(i + 1);
                recommendation.setPrimaryReason("Score de correspondance √©lev√©");
                recommendation.setSecondaryReason("Bas√© sur l'algorithme de matching");
                recommendation.setStrengths("Correspondance forte avec le profil utilisateur");
                recommendation.setConsiderations("V√©rifiez les pr√©requis sp√©cifiques");
                
                recommendations.add(recommendation);
            }
            
            log.debug("‚úÖ {} recommandations g√©n√©r√©es par le moteur par d√©faut", recommendations.size());
            return recommendations;
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la g√©n√©ration des recommandations par d√©faut : {}", e.getMessage(), e);
            return new ArrayList<>();
        }
    }
    
    @Override
    public String getEngineName() {
        return "Default Recommendation Engine";
    }
    
    @Override
    public String getDescription() {
        return "Moteur de recommandation par d√©faut bas√© sur les scores de matching";
    }
    
    @Override
    public boolean isEnabled() {
        return true;
    }
    
    @Override
    public int getPriority() {
        return 1; // Priorit√© la plus basse
    }
}
