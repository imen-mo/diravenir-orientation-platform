package com.dira.diravenir1.service;

import com.dira.diravenir1.Entities.EmailVerificationToken;
import com.dira.diravenir1.Entities.Utilisateur;
import com.dira.diravenir1.Repository.EmailVerificationTokenRepository;
import com.dira.diravenir1.Repository.UtilisateurRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class EmailVerificationService {

    private final EmailVerificationTokenRepository tokenRepository;
    private final UtilisateurRepository utilisateurRepository;
    private final EmailService emailService;

    @Value("${app.email.verification.expiration:24}")
    private int expirationHours;

    /**
     * G√©n√®re et envoie un token de v√©rification email
     */
    @Transactional
    public boolean generateAndSendVerificationEmail(Utilisateur utilisateur) {
        try {
            // Supprimer l'ancien token s'il existe
            tokenRepository.deleteByUtilisateurId(utilisateur.getId());

            // Cr√©er un nouveau token s√©curis√©
            String token = UUID.randomUUID().toString();
            LocalDateTime now = LocalDateTime.now();
            LocalDateTime expirationDate = now.plusHours(expirationHours);

            System.out.println("üîç G√©n√©ration du token: " + token);
            System.out.println("üîç Heure de cr√©ation: " + now);
            System.out.println("üîç Expiration: " + expirationDate);
            System.out.println("üîç Heures d'expiration configur√©es: " + expirationHours);
            System.out.println("üîç Dur√©e de vie: " + expirationHours + " heures");

            EmailVerificationToken verificationToken = EmailVerificationToken.builder()
                    .token(token)
                    .utilisateur(utilisateur)
                    .expirationDate(expirationDate)
                    .build();

            tokenRepository.save(verificationToken);
            System.out.println("üîç Token sauvegard√© avec ID: " + verificationToken.getId());

            // Envoyer l'email de v√©rification
            return emailService.sendVerificationEmail(utilisateur.getEmail(), utilisateur.getNom(), token);

        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la g√©n√©ration du token de v√©rification: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * V√©rifie un token de v√©rification email
     */
    @Transactional
    public boolean verifyEmail(String token) {
        try {
            // Validation de s√©curit√©
            if (token == null || token.trim().isEmpty()) {
                System.out.println("‚ùå Token de v√©rification vide ou null");
                return false;
            }
            
            // Nettoyer le token des caract√®res ind√©sirables
            String cleanToken = token.trim();
            System.out.println("üîç V√©rification du token: " + cleanToken);
            
            EmailVerificationToken verificationToken = tokenRepository.findByToken(cleanToken)
                    .orElse(null);

            if (verificationToken == null) {
                System.out.println("‚ùå Token de v√©rification non trouv√©: " + cleanToken);
                return false;
            }

            System.out.println("üîç Token trouv√©: " + verificationToken.getToken());
            System.out.println("üîç Expiration: " + verificationToken.getExpirationDate());
            System.out.println("üîç Utilis√©: " + verificationToken.isUsed());
            System.out.println("üîç Valide: " + verificationToken.isValid());
            System.out.println("üîç Heures restantes: " + java.time.Duration.between(LocalDateTime.now(), verificationToken.getExpirationDate()).toHours());

            if (verificationToken.isUsed()) {
                System.out.println("‚ùå Token de v√©rification d√©j√† utilis√©: " + cleanToken);
                System.out.println("‚ÑπÔ∏è  Ce token a d√©j√† √©t√© utilis√© pour activer le compte: " + verificationToken.getUtilisateur().getEmail());
                return false;
            }
            
            if (verificationToken.isExpired()) {
                System.out.println("‚ùå Token de v√©rification expir√©: " + cleanToken);
                System.out.println("‚ÑπÔ∏è  Expiration: " + verificationToken.getExpirationDate());
                return false;
            }

            // Marquer le token comme utilis√©
            verificationToken.setUsed(true);
            tokenRepository.save(verificationToken);

            // Activer le compte utilisateur
            Utilisateur utilisateur = verificationToken.getUtilisateur();
            utilisateur.setCompteActif(true);
            utilisateurRepository.save(utilisateur);

            System.out.println("‚úÖ Email v√©rifi√© avec succ√®s pour: " + utilisateur.getEmail());
            return true;

        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la v√©rification email: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * Renvoie un email de v√©rification
     */
    @Transactional
    public boolean resendVerificationEmail(String email) {
        try {
            Utilisateur utilisateur = utilisateurRepository.findByEmail(email)
                    .orElse(null);

            if (utilisateur == null) {
                System.out.println("‚ùå Utilisateur non trouv√© pour le renvoi: " + email);
                return false;
            }

            if (utilisateur.isCompteActif()) {
                System.out.println("‚úÖ Compte d√©j√† v√©rifi√© pour: " + utilisateur);
                return true;
            }

            return generateAndSendVerificationEmail(utilisateur);

        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors du renvoi de l'email de v√©rification: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * Nettoyage automatique des tokens expir√©s (toutes les 6 heures)
     */
    @Scheduled(fixedRate = 21600000, initialDelay = 300000) // 6 heures, d√©marrage apr√®s 5 minutes
    @Transactional
    public void cleanupExpiredTokens() {
        try {
            LocalDateTime now = LocalDateTime.now();
            tokenRepository.deleteExpiredTokens(now);
            System.out.println("üßπ Nettoyage des tokens de v√©rification expir√©s effectu√©");
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors du nettoyage des tokens expir√©s: " + e.getMessage());
            // Log d√©taill√© pour le d√©bogage
            if (e.getMessage() != null && e.getMessage().contains("Executing an update/delete query")) {
                System.out.println("‚ÑπÔ∏è  Cette erreur est normale au d√©marrage, le nettoyage reprendra automatiquement");
            }
        }
    }
}
