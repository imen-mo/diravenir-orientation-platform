package com.dira.diravenir1.service;

import com.dira.diravenir1.dto.OrientationResponseDTO;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

@Service
public class EmailServiceImpl implements EmailService {
    @Value("${spring.mail.username:test@diravenir.com}")
    private String mailUsername;
    
    @Value("${app.frontend.url:http://localhost:3000}")
    private String frontendUrl;
    
    private final JavaMailSender mailSender;

    public EmailServiceImpl(JavaMailSender mailSender) {
        this.mailSender = mailSender;
    }

    @Override
    public boolean sendOrientationResults(String userEmail, String userName, OrientationResponseDTO results) {
        try {
            System.out.println("üìß Service Email: Envoi des r√©sultats d'orientation √†: " + userEmail);
            
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom(mailUsername);
            message.setTo(userEmail);
            message.setSubject("üéØ Vos r√©sultats d'orientation - Diravenir");
            
            String emailContent = String.format(
                "üèÜ Top 3 des programmes recommand√©s :\n",
                userName,
                "Profil Principal", // Valeur par d√©faut
                "Score Global" // Valeur par d√©faut
            );
            
            // Ajouter les 3 meilleurs programmes (comment√© temporairement)
            /*
            for (int i = 0; i < Math.min(3, results.getProgrammesRecommandes().size()); i++) {
                var programme = results.getProgrammesRecommandes().get(i);
                emailContent += String.format(
                    "   %d. %s - %s\n" +
                    "      Score : %d/100\n" +
                    "      Universit√© : %s\n\n",
                    i + 1,
                    programme.getNom(),
                    programme.getDomaine(),
                    programme.getScore(),
                    programme.getUniversite()
                );
            }
            */
            
            // Version simplifi√©e pour l'instant
            emailContent += "   Programmes recommand√©s disponibles dans votre espace personnel\n\n";
            
            emailContent += String.format(
                "üîó Consultez vos r√©sultats complets :\n" +
                "%s/results\n\n" +
                "√Ä bient√¥t !\n\n" +
                "Cordialement,\nL'√©quipe Diravenir",
                frontendUrl
            );
            
            message.setText(emailContent);
            mailSender.send(message);
            
            System.out.println("‚úÖ Email de r√©sultats d'orientation envoy√© avec succ√®s √†: " + userEmail);
            return true;
            
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de l'envoi de l'email de r√©sultats: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public boolean sendWelcomeEmail(String userEmail, String userName) {
        try {
            System.out.println("üìß Service Email: Envoi d'email de bienvenue √†: " + userEmail);
            
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom(mailUsername);
            message.setTo(userEmail);
            message.setSubject("üéâ Bienvenue sur Diravenir !");
            
            String emailContent = String.format(
                "Bonjour %s,\n\n" +
                "Bienvenue sur Diravenir ! Nous sommes ravis de vous accompagner dans votre parcours d'orientation.\n\n" +
                "Votre compte a √©t√© cr√©√© avec succ√®s avec l'email: %s\n\n" +
                "üöÄ Pr√™t(e) √† d√©couvrir votre orientation ?\n" +
                "Compl√©tez votre test d'orientation pour recevoir des recommandations personnalis√©es.\n\n" +
                "√Ä bient√¥t !\n\n" +
                "Cordialement,\nL'√©quipe Diravenir",
                userName,
                userEmail
            );
            
            message.setText(emailContent);
            mailSender.send(message);
            
            System.out.println("‚úÖ Email de bienvenue envoy√© avec succ√®s √†: " + userEmail);
            return true;
            
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de l'envoi de l'email de bienvenue: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public boolean sendVerificationEmail(String userEmail, String userName, String token) {
        try {
            System.out.println("üìß Service Email: Envoi d'email de v√©rification √†: " + userEmail);
            System.out.println("üîç Configuration SMTP:");
            System.out.println("   - Username: " + mailUsername);
            System.out.println("   - Frontend URL: " + frontendUrl);
            
            // Validation email basique (juste @ et .)
            if (!userEmail.contains("@") || !userEmail.contains(".")) {
                System.err.println("‚ùå Format d'email invalide: " + userEmail);
                return false;
            }
            
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom(mailUsername);
            message.setTo(userEmail);
            message.setSubject("üîê V√©rifiez votre email - Diravenir");
            
            String verificationUrl = frontendUrl + "/verify-email?token=" + token;
            System.out.println("üîó URL de v√©rification: " + verificationUrl);
            
            String emailContent = String.format(
                "Bonjour %s,\n\n" +
                "Merci de vous √™tre inscrit sur Diravenir !\n\n" +
                "üîê Pour activer votre compte, veuillez cliquer sur le lien suivant :\n" +
                "%s\n\n" +
                "‚ö†Ô∏è  Ce lien expire dans 7 jours.\n\n" +
                "Si vous n'avez pas cr√©√© de compte sur Diravenir, ignorez cet email.\n\n" +
                "√Ä bient√¥t !\n\n" +
                "Cordialement,\nL'√©quipe Diravenir",
                userName,
                verificationUrl
            );
            
            message.setText(emailContent);
            System.out.println("üì§ Tentative d'envoi de l'email...");
            mailSender.send(message);
            
            System.out.println("‚úÖ Email de v√©rification envoy√© avec succ√®s √†: " + userEmail);
            return true;
            
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de l'envoi de l'email de v√©rification: " + e.getMessage());
            System.err.println("‚ùå Type d'erreur: " + e.getClass().getSimpleName());
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public boolean sendPasswordResetEmail(String userEmail, String userName, String token) {
        try {
            System.out.println("üìß Service Email: Envoi d'email de r√©initialisation √†: " + userEmail);
            
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom(mailUsername);
            message.setTo(userEmail);
            message.setSubject("üîë R√©initialisation de mot de passe - Diravenir");
            
            String resetUrl = frontendUrl + "/reset-password?token=" + token;
            
            String emailContent = String.format(
                "Bonjour %s,\n\n" +
                "Vous avez demand√© la r√©initialisation de votre mot de passe sur Diravenir.\n\n" +
                "üîë Pour d√©finir un nouveau mot de passe, veuillez cliquer sur le lien suivant :\n" +
                "%s\n\n" +
                "‚ö†Ô∏è  Ce lien expire dans 1 heure.\n\n" +
                "Si vous n'avez pas demand√© cette r√©initialisation, ignorez cet email.\n\n" +
                "√Ä bient√¥t !\n\n" +
                "Cordialement,\nL'√©quipe Diravenir",
                userName,
                resetUrl
            );
            
            message.setText(emailContent);
            mailSender.send(message);
            
            System.out.println("‚úÖ Email de r√©initialisation envoy√© avec succ√®s √†: " + userEmail);
            return true;
            
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de l'envoi de l'email de r√©initialisation: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
    
    @Override
    public void sendEmail(String to, String subject, String body) {
        try {
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom(mailUsername);
            message.setTo(to);
            message.setSubject(subject);
            message.setText(body);
            mailSender.send(message);
            System.out.println("‚úÖ Email simple envoy√© avec succ√®s √†: " + to);
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de l'envoi de l'email simple: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    @Override
    public void sendEmailWithAttachment(String to, String subject, String body, byte[] attachment, String filename) {
        // Impl√©mentation simplifi√©e - envoi sans pi√®ce jointe pour l'instant
        sendEmail(to, subject, body + "\n\n[Pi√®ce jointe: " + filename + " - non impl√©ment√©e]");
    }
    
    @Override
    public void sendEmailToAdmin(String subject, String body) {
        // Envoi √† l'admin (utilise l'email configur√©)
        sendEmail(mailUsername, "[ADMIN] " + subject, body);
    }
    
    @Override
    public void sendEmailToAdminWithAttachment(String subject, String body, byte[] attachment, String filename) {
        // Envoi √† l'admin avec pi√®ce jointe
        sendEmailToAdmin(subject, body + "\n\n[Pi√®ce jointe: " + filename + " - non impl√©ment√©e]");
    }
    
    @Override
    public void sendNewApplicationNotification(String studentName, String studentEmail, String programName) {
        String subject = "üìù Nouvelle candidature re√ßue";
        String body = String.format(
            "Une nouvelle candidature a √©t√© soumise :\n\n" +
            "üë§ √âtudiant: %s\n" +
            "üìß Email: %s\n" +
            "üéì Programme: %s\n\n" +
            "Veuillez traiter cette candidature dans votre interface d'administration.",
            studentName, studentEmail, programName
        );
        sendEmailToAdmin(subject, body);
    }
    
    @Override
    public void sendStatusChangeNotification(String studentEmail, String studentName, String oldStatus, String newStatus) {
        try {
            String subject = "üîÑ Mise √† jour de votre candidature - Diravenir";
            String body = String.format(
                "Bonjour %s,\n\n" +
                "Le statut de votre candidature a √©t√© mis √† jour :\n\n" +
                "üìä Ancien statut: %s\n" +
                "üìä Nouveau statut: %s\n\n" +
                "üîó Consultez les d√©tails dans votre espace personnel :\n" +
                "%s/dashboard\n\n" +
                "√Ä bient√¥t !\n\n" +
                "Cordialement,\nL'√©quipe Diravenir",
                studentName, oldStatus, newStatus, frontendUrl
            );
            
            sendEmail(studentEmail, subject, body);
            System.out.println("‚úÖ Notification de changement de statut envoy√©e √†: " + studentEmail);
            
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de l'envoi de la notification de changement de statut: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
