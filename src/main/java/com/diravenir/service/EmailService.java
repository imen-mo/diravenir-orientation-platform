package com.diravenir.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
@Slf4j
public class EmailService implements EmailServiceInterface {

    private final JavaMailSender mailSender;
    
    @Value("${app.frontend.url:http://localhost:3000}")
    private String frontendUrl;
    
    @Value("${spring.mail.username}")
    private String fromEmail;

    /**
     * Envoie un email de v√©rification
     */
    public void sendVerificationEmail(String toEmail, String userName, String verificationToken) {
        log.info("üìß Envoi d'email de v√©rification √†: {}", toEmail);
        
        try {
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom(fromEmail);
            message.setTo(toEmail);
            message.setSubject("üîê V√©rification de votre compte DirAvenir");
            
            String verificationUrl = frontendUrl + "/verify-email?token=" + verificationToken;
            
            message.setText(buildVerificationEmailContent(userName, verificationUrl));
            
            mailSender.send(message);
            log.info("‚úÖ Email de v√©rification envoy√© avec succ√®s √†: {}", toEmail);
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de l'envoi de l'email de v√©rification: {}", e.getMessage());
            throw new RuntimeException("Erreur lors de l'envoi de l'email de v√©rification", e);
        }
    }

    /**
     * Envoie un email de r√©initialisation de mot de passe
     */
    public void sendPasswordResetEmail(String toEmail, String userName, String resetToken) {
        log.info("üìß Envoi d'email de reset √†: {}", toEmail);
        
        try {
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom(fromEmail);
            message.setTo(toEmail);
            message.setSubject("üîí R√©initialisation de votre mot de passe DirAvenir");
            
            String resetUrl = frontendUrl + "/reset-password?token=" + resetToken;
            
            message.setText(buildPasswordResetEmailContent(userName, resetUrl));
            
            mailSender.send(message);
            log.info("‚úÖ Email de reset envoy√© avec succ√®s √†: {}", toEmail);
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de l'envoi de l'email de reset: {}", e.getMessage());
            throw new RuntimeException("Erreur lors de l'envoi de l'email de r√©initialisation", e);
        }
    }

    /**
     * Envoie un email OTP
     */
    public void sendOTPEmail(String toEmail, String userName, String otpCode) {
        log.info("üìß Envoi d'email OTP √†: {}", toEmail);
        
        try {
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom(fromEmail);
            message.setTo(toEmail);
            message.setSubject("üîê Code de v√©rification DirAvenir");
            
            message.setText(buildOTPEmailContent(userName, otpCode));
            
            mailSender.send(message);
            log.info("‚úÖ Email OTP envoy√© avec succ√®s √†: {}", toEmail);
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de l'envoi de l'email OTP: {}", e.getMessage());
            throw new RuntimeException("Erreur lors de l'envoi de l'email OTP", e);
        }
    }

    /**
     * Envoie un email de bienvenue
     */
    public void sendWelcomeEmail(String toEmail, String userName) {
        log.info("üìß Envoi d'email de bienvenue √†: {}", toEmail);
        
        try {
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom(fromEmail);
            message.setTo(toEmail);
            message.setSubject("üéâ Bienvenue sur DirAvenir !");
            
            message.setText(buildWelcomeEmailContent(userName));
            
            mailSender.send(message);
            log.info("‚úÖ Email de bienvenue envoy√© avec succ√®s √†: {}", toEmail);
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de l'envoi de l'email de bienvenue: {}", e.getMessage());
            // Ne pas faire √©chouer le processus si l'email de bienvenue √©choue
        }
    }

    /**
     * Envoie les r√©sultats d'orientation par email
     */
    public void sendOrientationResultsEmail(String toEmail, String userName, String testUuid, 
                                          String topRecommendation, Double topScore, 
                                          String userProfile) {
        log.info("üìß Envoi des r√©sultats d'orientation √†: {}", toEmail);
        
        try {
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom(fromEmail);
            message.setTo(toEmail);
            message.setSubject("üéØ Vos r√©sultats d'orientation DirAvenir");
            
            message.setText(buildOrientationResultsEmailContent(userName, testUuid, 
                                                               topRecommendation, topScore, userProfile));
            
            mailSender.send(message);
            log.info("‚úÖ Email de r√©sultats d'orientation envoy√© avec succ√®s √†: {}", toEmail);
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de l'envoi de l'email de r√©sultats: {}", e.getMessage());
            // Ne pas faire √©chouer le processus si l'email √©choue
        }
    }

    /**
     * Construit le contenu de l'email de v√©rification
     */
    private String buildVerificationEmailContent(String userName, String verificationUrl) {
        return String.format("""
            Bonjour %s,
            
            Bienvenue sur DirAvenir ! üéì
            
            Pour activer votre compte et commencer votre parcours d'orientation, 
            veuillez cliquer sur le lien ci-dessous :
            
            üîó %s
            
            Ce lien est valide pendant 24 heures.
            
            Si vous n'avez pas cr√©√© de compte sur DirAvenir, 
            vous pouvez ignorer cet email en toute s√©curit√©.
            
            Cordialement,
            L'√©quipe DirAvenir
            """, userName, verificationUrl);
    }

    /**
     * Construit le contenu de l'email OTP
     */
    private String buildOTPEmailContent(String userName, String otpCode) {
        return String.format("""
            Bonjour %s,
            
            Voici votre code de v√©rification DirAvenir :
            
            üîê %s
            
            Ce code expire dans 10 minutes.
            
            Si vous n'avez pas demand√© ce code, 
            vous pouvez ignorer cet email en toute s√©curit√©.
            
            Cordialement,
            L'√©quipe DirAvenir
            """, userName, otpCode);
    }

    /**
     * Construit le contenu de l'email de r√©initialisation
     */
    private String buildPasswordResetEmailContent(String userName, String resetUrl) {
        return String.format("""
            Bonjour %s,
            
            Vous avez demand√© la r√©initialisation de votre mot de passe DirAvenir.
            
            Pour cr√©er un nouveau mot de passe, cliquez sur le lien ci-dessous :
            
            üîó %s
            
            Ce lien est valide pendant 1 heure.
            
            Si vous n'avez pas demand√© cette r√©initialisation, 
            vous pouvez ignorer cet email en toute s√©curit√©.
            
            Cordialement,
            L'√©quipe DirAvenir
            """, userName, resetUrl);
    }

    /**
     * Construit le contenu de l'email de bienvenue
     */
    private String buildWelcomeEmailContent(String userName) {
        return String.format("""
            Bonjour %s,
            
            F√©licitations ! Votre compte DirAvenir est maintenant activ√© ! üéâ
            
            Vous pouvez maintenant :
            ‚Ä¢ Acc√©der √† votre tableau de bord personnel
            ‚Ä¢ Commencer votre test d'orientation
            ‚Ä¢ Explorer les programmes disponibles
            ‚Ä¢ Postuler aux universit√©s partenaires
            
            Connectez-vous d√®s maintenant : %s/login
            
            Bonne orientation !
            L'√©quipe DirAvenir
            """, userName, frontendUrl);
    }

    /**
     * Construit le contenu de l'email de r√©sultats d'orientation
     */
    private String buildOrientationResultsEmailContent(String userName, String testUuid, 
                                                      String topRecommendation, Double topScore, 
                                                      String userProfile) {
        return String.format("""
            Bonjour %s,
            
            üéØ Vos r√©sultats d'orientation DirAvenir sont pr√™ts !
            
            üìä R√âSULTATS DE VOTRE TEST :
            ‚Ä¢ Test ID : %s
            ‚Ä¢ Meilleure recommandation : %s
            ‚Ä¢ Score de correspondance : %.1f%%
            
            üìà VOTRE PROFIL :
            %s
            
            üéì PROCHAINES √âTAPES :
            ‚Ä¢ Explorez les programmes recommand√©s
            ‚Ä¢ D√©couvrez les universit√©s partenaires
            ‚Ä¢ Consultez les t√©moignages d'√©tudiants
            ‚Ä¢ Postulez directement via notre plateforme
            
            üîó Acc√©dez √† vos r√©sultats complets : %s/results/%s
            
            üí° CONSEIL :
            Ces r√©sultats sont bas√©s sur vos r√©ponses au test. N'h√©sitez pas √† explorer 
            d'autres options qui pourraient vous int√©resser !
            
            Bonne continuation dans votre parcours d'orientation !
            
            Cordialement,
            L'√©quipe DirAvenir
            """, userName, testUuid, topRecommendation, topScore, 
                 formatUserProfile(userProfile), frontendUrl, testUuid);
    }

    /**
     * Formate le profil utilisateur pour l'email
     */
    private String formatUserProfile(String userProfileJson) {
        try {
            // Parse simple du JSON pour extraire les valeurs principales
            String formatted = userProfileJson
                .replaceAll("[{}\"]", "")
                .replaceAll(",", "\n‚Ä¢ ")
                .replaceAll(":", " : ");
            return "‚Ä¢ " + formatted;
        } catch (Exception e) {
            return "‚Ä¢ Profil calcul√© avec succ√®s";
        }
    }
}