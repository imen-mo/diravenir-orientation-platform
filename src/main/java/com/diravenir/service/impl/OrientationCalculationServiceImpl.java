package com.diravenir.service;

import com.diravenir.dto.OrientationRequestDTO;
import com.diravenir.dto.OrientationResultDTO;
import com.diravenir.dto.MajorRecommendationDto;
import com.diravenir.Entities.OrientationMajor;
import com.diravenir.Entities.IdealProfile;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class OrientationCalculationService {
    
    private final ObjectMapper objectMapper;
    private final OrientationScoringService scoringService;
    private final IdealProfilesService idealProfilesService;
    
    /**
     * Calcule le profil complet de l'utilisateur bas√© sur ses r√©ponses
     */
    public Map<String, Integer> calculateUserProfile(OrientationRequestDTO request) {
        log.info("üßÆ Calcul du profil utilisateur avec le nouveau service de scoring");
        
        // Convertir les r√©ponses en format Map pour le service de scoring
        Map<String, String> answers = new HashMap<>();
        answers.put("q1", request.getQ1());
        answers.put("q2", request.getQ2());
        answers.put("q3", request.getQ3());
        answers.put("q4", request.getQ4());
        answers.put("q5", request.getQ5());
        answers.put("q6", request.getQ6());
        answers.put("q7", request.getQ7());
        answers.put("q8", request.getQ8());
        answers.put("q9", request.getQ9());
        answers.put("q10", request.getQ10());
        answers.put("q11", request.getQ11());
        answers.put("q12", request.getQ12());
        answers.put("q13", request.getQ13());
        answers.put("q14", request.getQ14());
        
        // Utiliser le service de scoring centralis√©
        return scoringService.calculateUserProfile(answers);
    }
    
    /**
     * Calcule les recommandations de majeures avec scores de correspondance
     */
    public List<MajorRecommendationDto> calculateRecommendations(
            Map<String, Integer> userProfile, 
            List<OrientationMajor> majors, 
            List<IdealProfile> idealProfiles) {
        
        List<MajorRecommendationDto> recommendations = new ArrayList<>();
        
        for (OrientationMajor major : majors) {
            // R√©cup√©rer le profil id√©al de cette majeure
            Map<String, Integer> idealProfile = getIdealProfileForMajor(major.getId(), idealProfiles);
            
            if (idealProfile.isEmpty()) {
                log.warn("Aucun profil id√©al trouv√© pour la majeure: {}", major.getMajorName());
                continue;
            }
            
            // Calculer le score de correspondance avec la nouvelle formule de normalisation
            double matchingScore = idealProfilesService.calculateMatchingScore(userProfile, idealProfile);
            
            // G√©n√©rer les raisons personnalis√©es
            String whyThisMajor = generateWhyThisMajor(userProfile, idealProfile);
            
            // Obtenir la description de la majeure
            String description = getMajorDescription(major.getMajorCode());
            
            // Cr√©er la recommandation
            MajorRecommendationDto recommendation = MajorRecommendationDto.builder()
                    .majorCode(major.getMajorCode())
                    .majorName(major.getMajorName())
                    .matchingScore(matchingScore)
                    .matchingPercentage(String.format("%.1f%%", matchingScore).replace(",", "."))
                    .category(major.getCategory())
                    .description(description)
                    .reasoning(whyThisMajor)
                    .whyThisMajor(whyThisMajor)
                    .pillarScores(convertToDoubleMap(idealProfile))
                    .build();
            
            recommendations.add(recommendation);
        }
        
        // Trier par score de correspondance d√©croissant
        return recommendations.stream()
                .sorted((r1, r2) -> Double.compare(r2.getMatchingScore(), r1.getMatchingScore()))
                .collect(Collectors.toList());
    }
    
    /**
     * Calcule le score de correspondance avec Distance Euclidienne Pond√©r√©e
     * Formule: Score_matching = 100 - sqrt(sum((DiffP * PoidsP)^2)) / facteur_normalisation
     * o√π DiffP = |Profil_Utilisateur[P] - Profil_Ideal_Majeure[P]|
     * et PoidsP = score id√©al du pilier pour la majeure
     */
    private double calculateWeightedEuclideanDistance(Map<String, Integer> userProfile, Map<String, Integer> idealProfile) {
        double sumWeightedSquaredDifferences = 0.0;
        int validPillars = 0;
        
        for (String pillar : userProfile.keySet()) {
            int userScore = userProfile.get(pillar);
            int idealScore = idealProfile.getOrDefault(pillar, 0);
            
            // Ne consid√©rer que les piliers avec un score id√©al > 0
            if (idealScore > 0) {
                // DiffP = diff√©rence absolue entre profil utilisateur et profil id√©al
                double diffP = Math.abs(userScore - idealScore);
                
                // PoidsP = score id√©al du pilier pour la majeure (normalis√© sur 1.0)
                double poidsP = idealScore / 100.0;
                
                // Calculer (DiffP * PoidsP)^2 et l'ajouter √† la somme
                sumWeightedSquaredDifferences += Math.pow(diffP * poidsP, 2);
                validPillars++;
            }
        }
        
        if (validPillars == 0) return 0.0;
        
        // Score_matching = 100 - sqrt(sum((DiffP * PoidsP)^2)) * facteur_normalisation
        double euclideanDistance = Math.sqrt(sumWeightedSquaredDifferences);
        
        // Facteur de normalisation pour obtenir des scores r√©alistes (0-100%)
        // Plus le facteur est √©lev√©, plus les scores seront √©lev√©s
        double normalizationFactor = 2.0; // Ajust√© selon les recommandations des .md
        double matchingScore = 100 - (euclideanDistance * normalizationFactor);
        
        // S'assurer que le score reste dans la plage [0, 100]
        double normalizedScore = Math.max(0, Math.min(100, matchingScore));
        
        log.debug("Calcul Distance Euclidienne Pond√©r√©e: somme={}, distance={}, facteur={}, score={}", 
                 sumWeightedSquaredDifferences, euclideanDistance, normalizationFactor, normalizedScore);
        
        return normalizedScore;
    }
    
    /**
     * Obtient la description d'une majeure
     */
    private String getMajorDescription(String majorCode) {
        Map<String, String> descriptions = new HashMap<>();
        
        // Ajouter toutes les descriptions
        descriptions.put("CS", "L'informatique est la science qui r√©volutionne notre monde num√©rique, combinant logique, cr√©ativit√© et innovation pour cr√©er des solutions technologiques.");
        descriptions.put("ELECTRICAL", "Le g√©nie √©lectrique est au c≈ìur de l'innovation technologique, couvrant la conception, l'analyse et la fabrication de syst√®mes √©lectriques.");
        descriptions.put("CIVIL", "Le g√©nie civil est une discipline qui combine cr√©ativit√© et rigueur technique pour concevoir et construire les infrastructures qui fa√ßonnent notre environnement.");
        descriptions.put("MECH", "Le g√©nie m√©canique est au c≈ìur de l'innovation industrielle, couvrant la conception, l'analyse et la fabrication de syst√®mes m√©caniques.");
        descriptions.put("FOODSCI", "Les sciences et ing√©nierie alimentaires combinent technologie et nutrition pour d√©velopper des solutions alimentaires innovantes et durables.");
        descriptions.put("ARCH", "L'architecture est la discipline qui fa√ßonne notre environnement b√¢ti, combinant cr√©ativit√© artistique et rigueur technique pour concevoir des espaces fonctionnels et esth√©tiques.");
        descriptions.put("DATASCI", "La science des donn√©es transforme l'information en connaissances exploitables, utilisant l'analyse statistique et l'intelligence artificielle pour r√©soudre des probl√®mes complexes.");
        descriptions.put("SE", "Le g√©nie logiciel est l'art de concevoir, d√©velopper et maintenir des syst√®mes logiciels robustes et efficaces qui r√©pondent aux besoins des utilisateurs.");
        descriptions.put("CHEM", "La chimie appliqu√©e explore les propri√©t√©s et transformations de la mati√®re pour cr√©er des solutions innovantes dans l'industrie et la recherche.");
        descriptions.put("ECONOMICS", "L'√©conomie analyse les m√©canismes de production, distribution et consommation des richesses pour comprendre et am√©liorer le fonctionnement des soci√©t√©s.");
        descriptions.put("AI", "L'intelligence artificielle d√©veloppe des syst√®mes capables d'apprendre, de raisonner et de prendre des d√©cisions autonomes pour r√©volutionner notre quotidien.");
        descriptions.put("INTECON", "L'√©conomie et commerce international explore les √©changes commerciaux mondiaux et les strat√©gies d'expansion des entreprises sur les march√©s internationaux.");
        descriptions.put("INTPOL", "La politique internationale analyse les relations entre √âtats, les organisations internationales et les enjeux g√©opolitiques qui fa√ßonnent notre monde.");
        descriptions.put("MATERIALS", "La science et ing√©nierie des mat√©riaux d√©veloppe de nouveaux mat√©riaux aux propri√©t√©s exceptionnelles pour r√©pondre aux d√©fis technologiques du futur.");
        descriptions.put("CHEMICAL", "Le g√©nie chimique transforme les mati√®res premi√®res en produits utiles, optimisant les processus industriels pour un d√©veloppement durable.");
        descriptions.put("PHARMACY", "La pharmacie combine sciences pharmaceutiques et soins de sant√© pour d√©velopper des m√©dicaments s√ªrs et efficaces qui am√©liorent la qualit√© de vie.");
        descriptions.put("FINANCE", "La finance analyse les march√©s financiers et d√©veloppe des strat√©gies d'investissement pour optimiser la gestion des ressources et cr√©er de la valeur.");
        descriptions.put("ELECTRONIC_INFO", "L'ing√©nierie √©lectronique et de l'information con√ßoit les syst√®mes √©lectroniques et informatiques qui sont au c≈ìur de la r√©volution num√©rique.");
        descriptions.put("HYDRAULIC", "L'ing√©nierie hydraulique d√©veloppe des solutions pour la gestion de l'eau, l'irrigation et l'√©nergie hydraulique, essentiels au d√©veloppement durable.");
        descriptions.put("BIOTECH", "La biotechnologie utilise les organismes vivants pour cr√©er des produits innovants dans les domaines de la sant√©, l'agriculture et l'environnement.");
        descriptions.put("LAW", "Le droit √©tablit les r√®gles qui r√©gissent les relations sociales et √©conomiques, garantissant la justice et l'√©quit√© dans notre soci√©t√©.");
        descriptions.put("TRANSPORT", "L'ing√©nierie des transports con√ßoit des syst√®mes de mobilit√© efficaces et durables pour connecter les personnes et les biens dans un monde globalis√©.");
        descriptions.put("NEWENERGY", "Les sciences et ing√©nierie des nouvelles √©nergies d√©veloppent des solutions √©nerg√©tiques propres et renouvelables pour un avenir durable.");
        descriptions.put("BIOENG", "La bioing√©nierie applique les principes d'ing√©nierie aux syst√®mes biologiques pour cr√©er des solutions innovantes en m√©decine et biotechnologie.");
        descriptions.put("BUSADM", "L'administration des affaires forme des leaders capables de g√©rer efficacement les organisations et de cr√©er de la valeur dans un environnement concurrentiel.");
        descriptions.put("PETROLEUM", "L'ing√©nierie p√©troli√®re optimise l'extraction et la transformation des ressources √©nerg√©tiques fossiles tout en d√©veloppant des alternatives durables.");
        descriptions.put("MECH_DESIGN", "La conception m√©canique, fabrication et automatisation r√©volutionne la production industrielle gr√¢ce √† l'innovation technologique et l'automatisation.");
        descriptions.put("INTBUS", "Le commerce international d√©veloppe des strat√©gies d'expansion mondiale et optimise les cha√Ænes d'approvisionnement pour conqu√©rir les march√©s internationaux.");
        descriptions.put("ROBOTICS", "L'ing√©nierie robotique cr√©e des syst√®mes autonomes intelligents qui r√©volutionnent l'industrie, la m√©decine et notre quotidien.");
        descriptions.put("BIOMEDICAL", "L'ing√©nierie biom√©dicale d√©veloppe des technologies m√©dicales innovantes pour am√©liorer les diagnostics et les traitements de sant√©.");
        descriptions.put("SAFETY", "L'ing√©nierie de la s√©curit√© prot√®ge les personnes et les biens en d√©veloppant des syst√®mes et proc√©dures qui minimisent les risques industriels.");
        descriptions.put("ECOMMERCE", "L'e-commerce r√©volutionne le commerce en ligne en cr√©ant des plateformes digitales innovantes qui connectent consommateurs et entreprises.");
        descriptions.put("NURSING", "Les soins infirmiers offrent des soins de sant√© complets et compassionnels, jouant un r√¥le essentiel dans le bien-√™tre des patients et des communaut√©s.");
        descriptions.put("MINING", "L'ing√©nierie mini√®re optimise l'extraction responsable des ressources min√©rales tout en pr√©servant l'environnement et en assurant la s√©curit√© des travailleurs.");
        descriptions.put("MARKET", "Le marketing et management d√©veloppe des strat√©gies commerciales innovantes pour cr√©er de la valeur et satisfaire les besoins des consommateurs.");
        descriptions.put("PR", "Les relations publiques construisent et maintiennent l'image positive des organisations en d√©veloppant des strat√©gies de communication efficaces.");
        descriptions.put("AERONAUTICAL", "L'ing√©nierie a√©ronautique con√ßoit des a√©ronefs performants et s√ªrs qui r√©volutionnent le transport a√©rien et l'exploration spatiale.");
        descriptions.put("TOURISM", "La gestion du tourisme d√©veloppe des exp√©riences touristiques m√©morables tout en pr√©servant les patrimoines culturels et naturels.");
        descriptions.put("AEROSPACE", "L'ing√©nierie a√©rospatiale explore les fronti√®res de l'espace en d√©veloppant des technologies de pointe pour l'aviation et l'astronautique.");
        descriptions.put("MBBS", "La m√©decine forme des professionnels de sant√© d√©vou√©s qui diagnostiquent, traitent et pr√©viennent les maladies pour am√©liorer la qualit√© de vie.");
        descriptions.put("MEDICINE", "La m√©decine allie science et humanit√© pour soigner les patients, pr√©venir les maladies et am√©liorer la sant√© publique.");
        descriptions.put("DENTISTRY", "La m√©decine dentaire pr√©serve et restaure la sant√© bucco-dentaire en combinant expertise technique et soins personnalis√©s.");
        descriptions.put("PSYCHOLOGY", "La psychologie explore le comportement humain et d√©veloppe des th√©rapies pour am√©liorer le bien-√™tre mental et √©motionnel des individus.");
        descriptions.put("ENGLISH", "Les √©tudes anglaises approfondissent la langue et la culture anglophones pour d√©velopper des comp√©tences de communication et d'analyse critique.");
        
        return descriptions.getOrDefault(majorCode, "Cette majeure correspond bien √† votre profil g√©n√©ral et offre de nombreuses opportunit√©s de carri√®re.");
    }
    
    /**
     * G√©n√®re le texte "Pourquoi cette majeure est faite pour vous"
     */
    private String generateWhyThisMajor(Map<String, Integer> userProfile, Map<String, Integer> idealProfile) {
        List<String> strongMatches = new ArrayList<>();
        
        for (String pillar : userProfile.keySet()) {
            int userScore = userProfile.get(pillar);
            int idealScore = idealProfile.getOrDefault(pillar, 0);
            
            // Identifier les correspondances fortes (score √©lev√© et diff√©rence faible)
            if (userScore >= 70 && idealScore >= 70 && Math.abs(userScore - idealScore) <= 15) {
                strongMatches.add(pillar);
            }
        }
        
        if (strongMatches.isEmpty()) {
            return "Votre profil pr√©sente une correspondance g√©n√©rale avec cette majeure.";
        }
        
        // G√©n√©rer un texte bas√© sur les correspondances fortes
        StringBuilder text = new StringBuilder("Vos points forts qui correspondent particuli√®rement √† cette majeure : ");
        
        for (int i = 0; i < Math.min(3, strongMatches.size()); i++) {
            String pillar = strongMatches.get(i);
            String pillarText = getPillarDisplayName(pillar);
            
            if (i > 0) {
                text.append(i == strongMatches.size() - 1 ? " et " : ", ");
            }
            text.append(pillarText);
        }
        
        text.append(".");
        return text.toString();
    }
    
    /**
     * Convertit une Map<String, Integer> en Map<String, Double>
     */
    private Map<String, Double> convertToDoubleMap(Map<String, Integer> intMap) {
        Map<String, Double> doubleMap = new HashMap<>();
        for (Map.Entry<String, Integer> entry : intMap.entrySet()) {
            doubleMap.put(entry.getKey(), entry.getValue().doubleValue());
        }
        return doubleMap;
    }
    
    /**
     * R√©cup√®re le profil id√©al d'une majeure
     */
    private Map<String, Integer> getIdealProfileForMajor(Long majorId, List<IdealProfile> idealProfiles) {
        Map<String, Integer> profile = new HashMap<>();
        
        for (IdealProfile idealProfile : idealProfiles) {
            if (idealProfile.getMajor().getId().equals(majorId)) {
                profile.put(idealProfile.getPillarName(), idealProfile.getIdealScore());
            }
        }
        
        return profile;
    }
    
    /**
     * Initialise les scores des piliers √† 0
     */
    private void initializePillarScores(Map<String, Integer> pillarScores) {
        String[] pillars = {
            "Interet_Scientifique_Tech", "Interet_Artistique_Creatif", "Interet_Social_Humain",
            "Interet_Business_Gestion", "Interet_Logique_Analytique", "Competence_Resolution_Problemes",
            "Competence_Communication", "Competence_Organisation", "Competence_Manuel_Technique",
            "Valeur_Impact_Societal", "Valeur_Innovation_Challenge", "Valeur_Stabilite_Securite",
            "Valeur_Autonomie", "Pref_Travail_Equipe_Collab", "Pref_Travail_Autonome",
            "Pref_Pratique_Terrain", "Pref_Theorie_Recherche"
        };
        
        for (String pillar : pillars) {
            pillarScores.put(pillar, 0);
        }
    }
    
    /**
     * Normalise les scores sur une √©chelle de 0 √† 100
     */
    private void normalizeScores(Map<String, Integer> pillarScores) {
        int maxScore = pillarScores.values().stream().mapToInt(Integer::intValue).max().orElse(1);
        
        pillarScores.replaceAll((pillar, score) -> {
            if (maxScore > 0) {
                return (int) Math.round((double) score / maxScore * 100);
            }
            return 0;
        });
    }
    
    /**
     * Convertit le nom technique du pilier en nom d'affichage
     */
    private String getPillarDisplayName(String pillar) {
        Map<String, String> pillarNames = new HashMap<>();
        pillarNames.put("Interet_Scientifique_Tech", "int√©r√™t pour les sciences et technologies");
        pillarNames.put("Interet_Artistique_Creatif", "cr√©ativit√© artistique");
        pillarNames.put("Interet_Social_Humain", "int√©r√™t pour les relations humaines");
        pillarNames.put("Interet_Business_Gestion", "int√©r√™t pour le business et la gestion");
        pillarNames.put("Interet_Logique_Analytique", "pens√©e logique et analytique");
        pillarNames.put("Competence_Resolution_Problemes", "capacit√© de r√©solution de probl√®mes");
        pillarNames.put("Competence_Communication", "comp√©tences en communication");
        pillarNames.put("Competence_Organisation", "comp√©tences organisationnelles");
        pillarNames.put("Competence_Manuel_Technique", "comp√©tences manuelles et techniques");
        pillarNames.put("Valeur_Impact_Societal", "d√©sir d'impact soci√©tal");
        pillarNames.put("Valeur_Innovation_Challenge", "go√ªt pour l'innovation et les d√©fis");
        pillarNames.put("Valeur_Stabilite_Securite", "recherche de stabilit√© et s√©curit√©");
        pillarNames.put("Valeur_Autonomie", "d√©sir d'autonomie");
        pillarNames.put("Pref_Travail_Equipe_Collab", "pr√©f√©rence pour le travail en √©quipe");
        pillarNames.put("Pref_Travail_Autonome", "pr√©f√©rence pour le travail autonome");
        pillarNames.put("Pref_Pratique_Terrain", "pr√©f√©rence pour le travail pratique");
        pillarNames.put("Pref_Theorie_Recherche", "pr√©f√©rence pour la th√©orie et la recherche");
        
        return pillarNames.getOrDefault(pillar, pillar);
    }
    
    // M√©thodes de traitement des questions individuelles selon les sp√©cifications exactes
    
    private void processQuestion1(String answer, Map<String, Integer> pillarScores) {
        if (answer == null) return;
        
        switch (answer) {
            case "A": // Cr√©er
                addScore(pillarScores, "Interet_Scientifique_Tech", 5);
                addScore(pillarScores, "Interet_Artistique_Creatif", 3);
                addScore(pillarScores, "Valeur_Innovation_Challenge", 4);
                addScore(pillarScores, "Competence_Manuel_Technique", 2);
                break;
            case "B": // Comprendre
                addScore(pillarScores, "Interet_Scientifique_Tech", 4);
                addScore(pillarScores, "Interet_Logique_Analytique", 5);
                addScore(pillarScores, "Competence_Resolution_Problemes", 4);
                addScore(pillarScores, "Pref_Theorie_Recherche", 3);
                break;
            case "C": // Aider
                addScore(pillarScores, "Interet_Social_Humain", 5);
                addScore(pillarScores, "Valeur_Impact_Societal", 5);
                addScore(pillarScores, "Competence_Communication", 4);
                break;
            case "D": // Organiser
                addScore(pillarScores, "Interet_Business_Gestion", 5);
                addScore(pillarScores, "Competence_Organisation", 5);
                addScore(pillarScores, "Pref_Travail_Equipe_Collab", 3);
                break;
            case "E": // Cr√©ativit√©
                addScore(pillarScores, "Interet_Artistique_Creatif", 5);
                addScore(pillarScores, "Valeur_Innovation_Challenge", 2);
                addScore(pillarScores, "Pref_Travail_Autonome", 3);
                break;
        }
    }
    
    private void processQuestion2(String answer, Map<String, Integer> pillarScores) {
        if (answer == null) return;
        
        // Question 2 single-choice selon les sp√©cifications
        switch (answer) {
            case "scientific":
                addScore(pillarScores, "Interet_Scientifique_Tech", 3);
                addScore(pillarScores, "Valeur_Innovation_Challenge", 2);
                break;
            case "art":
                addScore(pillarScores, "Interet_Artistique_Creatif", 3);
                break;
            case "social":
                addScore(pillarScores, "Interet_Social_Humain", 3);
                addScore(pillarScores, "Valeur_Impact_Societal", 2);
                break;
            case "business":
                addScore(pillarScores, "Interet_Business_Gestion", 3);
                break;
            case "organization":
                addScore(pillarScores, "Competence_Organisation", 3);
                break;
            case "sports":
                addScore(pillarScores, "Competence_Manuel_Technique", 3);
                break;
        }
    }
    
    private void processQuestion3(String answer, Map<String, Integer> pillarScores) {
        if (answer == null) return;
        
        switch (answer) {
            case "A": // √âlectronique
                addScore(pillarScores, "Interet_Scientifique_Tech", 3);
                addScore(pillarScores, "Competence_Manuel_Technique", 2);
                break;
            case "B": // Livres
                addScore(pillarScores, "Interet_Logique_Analytique", 3);
                addScore(pillarScores, "Pref_Theorie_Recherche", 2);
                break;
            case "C": // Art
                addScore(pillarScores, "Interet_Artistique_Creatif", 3);
                break;
            case "D": // Jeux
                addScore(pillarScores, "Interet_Social_Humain", 3);
                break;
            case "E": // Mode
                addScore(pillarScores, "Interet_Business_Gestion", 3);
                addScore(pillarScores, "Interet_Artistique_Creatif", 2);
                break;
        }
    }
    
    private void processQuestion4(String answer, Map<String, Integer> pillarScores) {
        if (answer == null) return;
        
        switch (answer) {
            case "A": // D√©composer
                addScore(pillarScores, "Competence_Resolution_Problemes", 4);
                addScore(pillarScores, "Interet_Logique_Analytique", 4);
                break;
            case "B": // Chercher faits
                addScore(pillarScores, "Interet_Scientifique_Tech", 3);
                addScore(pillarScores, "Interet_Logique_Analytique", 3);
                addScore(pillarScores, "Pref_Theorie_Recherche", 2);
                break;
            case "C": // Imaginer
                addScore(pillarScores, "Interet_Artistique_Creatif", 4);
                addScore(pillarScores, "Valeur_Innovation_Challenge", 4);
                break;
            case "D": // Autres
                addScore(pillarScores, "Competence_Communication", 4);
                addScore(pillarScores, "Pref_Travail_Equipe_Collab", 4);
                addScore(pillarScores, "Interet_Social_Humain", 2);
                break;
        }
    }
    
    private void processQuestion5(String answer, Map<String, Integer> pillarScores) {
        if (answer == null) return;
        
        // Question 5 single-choice avec scores selon sp√©cifications
        switch (answer) {
            case "budget":
                addScore(pillarScores, "Interet_Business_Gestion", 4);
                addScore(pillarScores, "Competence_Organisation", 4);
                addScore(pillarScores, "Interet_Logique_Analytique", 3);
                break;
            case "event":
                addScore(pillarScores, "Competence_Organisation", 4);
                addScore(pillarScores, "Pref_Travail_Equipe_Collab", 4);
                addScore(pillarScores, "Competence_Communication", 3);
                break;
            case "writing":
                addScore(pillarScores, "Competence_Communication", 4);
                addScore(pillarScores, "Interet_Artistique_Creatif", 4);
                break;
            case "repair":
                addScore(pillarScores, "Competence_Manuel_Technique", 4);
                addScore(pillarScores, "Interet_Scientifique_Tech", 4);
                break;
            case "drawing":
                addScore(pillarScores, "Interet_Artistique_Creatif", 4);
                addScore(pillarScores, "Competence_Manuel_Technique", 4);
                break;
            case "equation":
                addScore(pillarScores, "Interet_Logique_Analytique", 4);
                addScore(pillarScores, "Interet_Scientifique_Tech", 4);
                break;
            case "convince":
                addScore(pillarScores, "Competence_Communication", 4);
                addScore(pillarScores, "Interet_Business_Gestion", 4);
                break;
            case "counsel":
                addScore(pillarScores, "Interet_Social_Humain", 4);
                addScore(pillarScores, "Competence_Communication", 4);
                break;
        }
    }
    
    private void processQuestion6(String answer, Map<String, Integer> pillarScores) {
        if (answer == null) return;
        
        switch (answer) {
            case "A": // Lire
                addScore(pillarScores, "Pref_Theorie_Recherche", 4);
                addScore(pillarScores, "Interet_Logique_Analytique", 3);
                break;
            case "B": // Vid√©o
                addScore(pillarScores, "Interet_Scientifique_Tech", 3);
                break;
            case "C": // Essayer
                addScore(pillarScores, "Competence_Manuel_Technique", 4);
                addScore(pillarScores, "Pref_Pratique_Terrain", 4);
                break;
            case "D": // Discuter
                addScore(pillarScores, "Competence_Communication", 4);
                addScore(pillarScores, "Pref_Travail_Equipe_Collab", 4);
                break;
        }
    }
    
    private void processQuestion7(String answer, Map<String, Integer> pillarScores) {
        if (answer == null) return;
        
        switch (answer) {
            case "A": // Am√©liorer vie
                addScore(pillarScores, "Valeur_Impact_Societal", 5);
                addScore(pillarScores, "Interet_Social_Humain", 4);
                break;
            case "B": // Syst√®mes efficaces
                addScore(pillarScores, "Valeur_Innovation_Challenge", 4);
                addScore(pillarScores, "Interet_Scientifique_Tech", 3);
                break;
            case "C": // Beaut√©
                addScore(pillarScores, "Interet_Artistique_Creatif", 5);
                break;
            case "D": // Justice
                addScore(pillarScores, "Valeur_Impact_Societal", 5);
                addScore(pillarScores, "Interet_Social_Humain", 3);
                break;
        }
    }
    
    private void processQuestion8(String answer, Map<String, Integer> pillarScores) {
        if (answer == null) return;
        
        switch (answer) {
            case "A": // Labo
                addScore(pillarScores, "Pref_Theorie_Recherche", 4);
                addScore(pillarScores, "Interet_Scientifique_Tech", 3);
                break;
            case "B": // Bureau coll.
                addScore(pillarScores, "Pref_Travail_Equipe_Collab", 4);
                addScore(pillarScores, "Interet_Business_Gestion", 2);
                break;
            case "C": // Studio
                addScore(pillarScores, "Interet_Artistique_Creatif", 4);
                addScore(pillarScores, "Competence_Manuel_Technique", 3);
                break;
            case "D": // Chantier
                addScore(pillarScores, "Pref_Pratique_Terrain", 4);
                addScore(pillarScores, "Competence_Manuel_Technique", 3);
                break;
            case "E": // Calme
                addScore(pillarScores, "Pref_Travail_Autonome", 4);
                addScore(pillarScores, "Pref_Theorie_Recherche", 2);
                break;
        }
    }
    
    private void processQuestion9(String answer, Map<String, Integer> pillarScores) {
        if (answer == null) return;
        
        // Question 9 single-choice avec scores selon sp√©cifications
        switch (answer) {
            case "security":
                addScore(pillarScores, "Valeur_Stabilite_Securite", 5);
                break;
            case "innovation":
                addScore(pillarScores, "Valeur_Innovation_Challenge", 5);
                break;
            case "autonomy":
                addScore(pillarScores, "Valeur_Autonomie", 5);
                break;
            case "salary":
                addScore(pillarScores, "Interet_Business_Gestion", 5);
                break;
        }
    }
    
    private void processQuestion10(String answer, Map<String, Integer> pillarScores) {
        if (answer == null) return;
        
        switch (answer) {
            case "A": // Comprendre
                addScore(pillarScores, "Interet_Logique_Analytique", 4);
                addScore(pillarScores, "Competence_Resolution_Problemes", 3);
                break;
            case "B": // Solution concr√®te
                addScore(pillarScores, "Pref_Pratique_Terrain", 4);
                addScore(pillarScores, "Competence_Resolution_Problemes", 3);
                break;
            case "C": // Rallier gens
                addScore(pillarScores, "Competence_Communication", 4);
                addScore(pillarScores, "Pref_Travail_Equipe_Collab", 3);
                break;
            case "D": // Techno avanc√©e
                addScore(pillarScores, "Valeur_Innovation_Challenge", 4);
                addScore(pillarScores, "Interet_Scientifique_Tech", 3);
                break;
        }
    }
    
    private void processQuestion11(String answer, Map<String, Integer> pillarScores) {
        if (answer == null) return;
        
        switch (answer) {
            case "A": // Seul
                addScore(pillarScores, "Pref_Travail_Autonome", 5);
                addScore(pillarScores, "Valeur_Autonomie", 4);
                break;
            case "B": // Petite √©quipe
                addScore(pillarScores, "Pref_Travail_Equipe_Collab", 5);
                break;
            case "C": // Grande structure
                addScore(pillarScores, "Valeur_Stabilite_Securite", 4);
                addScore(pillarScores, "Competence_Organisation", 3);
                break;
        }
    }
    
    private void processQuestion12(String answer, Map<String, Integer> pillarScores) {
        if (answer == null) return;
        
        switch (answer) {
            case "A": // Faits
                addScore(pillarScores, "Competence_Organisation", 4);
                addScore(pillarScores, "Interet_Logique_Analytique", 3);
                break;
            case "B": // Histoire
                addScore(pillarScores, "Competence_Communication", 4);
                addScore(pillarScores, "Interet_Artistique_Creatif", 3);
                break;
            case "C": // Interagir
                addScore(pillarScores, "Competence_Communication", 4);
                addScore(pillarScores, "Interet_Social_Humain", 3);
                addScore(pillarScores, "Pref_Travail_Equipe_Collab", 2);
                break;
        }
    }
    
    private void processQuestion13(String answer, Map<String, Integer> pillarScores) {
        if (answer == null) return;
        
        switch (answer) {
            case "A": // Logique
                addScore(pillarScores, "Interet_Logique_Analytique", 5);
                break;
            case "B": // Intuition
                addScore(pillarScores, "Interet_Artistique_Creatif", 4);
                addScore(pillarScores, "Pref_Travail_Autonome", 3);
                break;
            case "C": // Avis autres
                addScore(pillarScores, "Interet_Social_Humain", 4);
                addScore(pillarScores, "Pref_Travail_Equipe_Collab", 3);
                break;
        }
    }
    
    private void processQuestion14(String answer, Map<String, Integer> pillarScores) {
        if (answer == null) return;
        
        // Question 14 single-choice selon sp√©cifications
        switch (answer) {
            case "sciences":
                addScore(pillarScores, "Interet_Scientifique_Tech", 4);
                addScore(pillarScores, "Interet_Logique_Analytique", 4);
                break;
            case "literature":
                addScore(pillarScores, "Interet_Social_Humain", 3);
                addScore(pillarScores, "Competence_Communication", 3);
                break;
            case "social":
                addScore(pillarScores, "Interet_Social_Humain", 4);
                addScore(pillarScores, "Pref_Theorie_Recherche", 2);
                break;
            case "arts":
                addScore(pillarScores, "Interet_Artistique_Creatif", 4);
                break;
            case "technology":
                addScore(pillarScores, "Interet_Scientifique_Tech", 4);
                addScore(pillarScores, "Interet_Logique_Analytique", 3);
                break;
            case "management":
                addScore(pillarScores, "Interet_Business_Gestion", 4);
                addScore(pillarScores, "Competence_Organisation", 3);
                break;
        }
    }
    
    /**
     * Ajoute un score √† un pilier
     */
    private void addScore(Map<String, Integer> pillarScores, String pillar, int score) {
        pillarScores.put(pillar, pillarScores.getOrDefault(pillar, 0) + score);
    }
    
    /**
     * Obtient les recommandations bas√©es sur le profil utilisateur avec les vrais profils id√©aux
     */
    public List<MajorRecommendationDto> getRecommendationsWithIdealProfiles(Map<String, Integer> userProfile) {
        log.info("üéØ Calcul des recommandations avec les profils id√©aux r√©els du IdealProfilesService");
        
        // R√©cup√©rer tous les profils id√©aux du service
        Map<String, Map<String, Integer>> allIdealProfiles = idealProfilesService.getAllIdealProfiles();
        
        log.info("üìä Trouv√© {} profils id√©aux dans le service", allIdealProfiles.size());
        
        List<MajorRecommendationDto> recommendations = new ArrayList<>();
        
        // Calculer le score de correspondance pour chaque majeure
        for (Map.Entry<String, Map<String, Integer>> entry : allIdealProfiles.entrySet()) {
            String majorCode = entry.getKey();
            Map<String, Integer> idealProfile = entry.getValue();
            
            // Calculer le score de correspondance avec Distance Euclidienne Pond√©r√©e
            double matchingScore = idealProfilesService.calculateMatchingScore(userProfile, idealProfile);
            
            // G√©n√©rer les raisons personnalis√©es
            String whyThisMajor = idealProfilesService.generateWhyThisMajor(userProfile, idealProfile);
            

            // Obtenir la description de la majeure
            String description = getMajorDescription(majorCode);
            
            // Cr√©er la recommandation
            MajorRecommendationDto recommendation = MajorRecommendationDto.builder()
                    .majorCode(majorCode)
                    .majorName(getMajorDisplayName(majorCode))
                    .matchingScore(matchingScore)
                    .matchingPercentage(String.format("%.1f%%", matchingScore).replace(",", "."))
                    .category(getMajorCategory(majorCode))
                    .description(description)
                    .reasoning(whyThisMajor)
                    .whyThisMajor(whyThisMajor)
                    .pillarScores(convertToDoubleMap(idealProfile))
                    .build();
            
            recommendations.add(recommendation);
            
            log.debug("üìä {}: score={:.1f}%", majorCode, matchingScore);
        }
        
        // Trier par score de correspondance d√©croissant et limiter aux top 3
        List<MajorRecommendationDto> sortedRecommendations = recommendations.stream()
                .sorted((r1, r2) -> Double.compare(r2.getMatchingScore(), r1.getMatchingScore()))
                .limit(3) // Limiter aux top 3 comme demand√©
                .collect(Collectors.toList());
        
        log.info("‚úÖ Calcul termin√©. Top 3 recommandations g√©n√©r√©es avec des scores r√©alistes");
        
        return sortedRecommendations;
    }
    
    /**
     * Obtient le nom d'affichage d'une majeure
     */
    private String getMajorDisplayName(String majorCode) {
        Map<String, String> majorNames = new HashMap<>();
        majorNames.put("CIVIL", "G√©nie Civil");
        majorNames.put("MECH", "G√©nie M√©canique");
        majorNames.put("ARCH", "Architecture");
        majorNames.put("INTBUS", "Commerce International");
        majorNames.put("BUSADM", "Administration des Affaires");
        majorNames.put("INTECON", "√âconomie et Commerce International");
        majorNames.put("MARKET", "Marketing et Management");
        majorNames.put("CS", "Informatique");
        majorNames.put("SE", "G√©nie Logiciel");
        majorNames.put("AI", "Intelligence Artificielle");
        majorNames.put("TOURISM", "Gestion du Tourisme");
        majorNames.put("NURSING", "Soins Infirmiers");
        majorNames.put("PHARMACY", "Pharmacie");
        majorNames.put("ELECTRICAL", "G√©nie √âlectrique");
        majorNames.put("FOODSCI", "Sciences et Ing√©nierie Alimentaires");
        majorNames.put("FINANCE", "Finance");
        majorNames.put("MECH_DESIGN", "Conception M√©canique, Fabrication et Automatisation");
        majorNames.put("LAW", "Science du Droit");
        majorNames.put("INTPOL", "Politique Internationale");
        majorNames.put("MBBS", "MBBS (M√©decine)");
        majorNames.put("PR", "Relations Publiques");
        majorNames.put("CHEM", "Chimie Appliqu√©e");
        majorNames.put("ENGLISH", "√âtudes Anglaises");
        majorNames.put("DENTISTRY", "M√©decine Dentaire");
        majorNames.put("NEWENERGY", "Sciences et Ing√©nierie des Nouvelles √ânergies");
        majorNames.put("HYDRAULIC", "Ing√©nierie Hydraulique");
        majorNames.put("TRANSPORT", "Ing√©nierie des Transports");
        majorNames.put("BIOENG", "Bioing√©nierie");
        majorNames.put("BIOTECH", "Biotechnologie");
        majorNames.put("MATERIALS", "Science et Ing√©nierie des Mat√©riaux");
        majorNames.put("ECOMMERCE", "E-Commerce");
        majorNames.put("ROBOTICS", "Ing√©nierie Robotique");
        majorNames.put("BIOMEDICAL", "Ing√©nierie Biom√©dicale");
        majorNames.put("DATASCI", "Science des Donn√©es");
        majorNames.put("ECONOMICS", "√âconomie");
        majorNames.put("CHEMICAL", "G√©nie Chimique");
        majorNames.put("PETROLEUM", "Ing√©nierie P√©troli√®re");
        majorNames.put("ELECTRONIC_INFO", "Ing√©nierie √âlectronique et de l'Information");
        majorNames.put("SAFETY", "Ing√©nierie de la S√©curit√©");
        majorNames.put("MINING", "Ing√©nierie Mini√®re");
        majorNames.put("PSYCHOLOGY", "Psychologie");
        majorNames.put("AERONAUTICAL", "Ing√©nierie A√©ronautique");
        majorNames.put("AEROSPACE", "Ing√©nierie A√©rospatiale");
        majorNames.put("MEDICINE", "M√©decine");
        
        return majorNames.getOrDefault(majorCode, majorCode);
    }
    
    /**
     * Obtient la cat√©gorie d'une majeure
     */
    private String getMajorCategory(String majorCode) {
        Map<String, String> categories = new HashMap<>();
        categories.put("CIVIL", "Ing√©nierie");
        categories.put("MECH", "Ing√©nierie");
        categories.put("ARCH", "Architecture");
        categories.put("INTBUS", "Commerce");
        categories.put("BUSADM", "Commerce");
        categories.put("INTECON", "Commerce");
        categories.put("MARKET", "Commerce");
        categories.put("CS", "Informatique");
        categories.put("SE", "Informatique");
        categories.put("AI", "Informatique");
        categories.put("TOURISM", "Commerce");
        categories.put("NURSING", "Sant√©");
        categories.put("PHARMACY", "Sant√©");
        categories.put("ELECTRICAL", "Ing√©nierie");
        categories.put("FOODSCI", "Ing√©nierie");
        categories.put("FINANCE", "Commerce");
        categories.put("MECH_DESIGN", "Ing√©nierie");
        categories.put("LAW", "Droit");
        categories.put("INTPOL", "Sciences Politiques");
        categories.put("MBBS", "Sant√©");
        categories.put("PR", "Communication");
        categories.put("CHEM", "Sciences");
        categories.put("ENGLISH", "Lettres");
        categories.put("DENTISTRY", "Sant√©");
        categories.put("NEWENERGY", "Ing√©nierie");
        categories.put("HYDRAULIC", "Ing√©nierie");
        categories.put("TRANSPORT", "Ing√©nierie");
        categories.put("BIOENG", "Ing√©nierie");
        categories.put("BIOTECH", "Sciences");
        categories.put("MATERIALS", "Ing√©nierie");
        categories.put("ECOMMERCE", "Commerce");
        categories.put("ROBOTICS", "Ing√©nierie");
        categories.put("BIOMEDICAL", "Ing√©nierie");
        categories.put("DATASCI", "Informatique");
        categories.put("ECONOMICS", "Commerce");
        categories.put("CHEMICAL", "Ing√©nierie");
        categories.put("PETROLEUM", "Ing√©nierie");
        categories.put("ELECTRONIC_INFO", "Ing√©nierie");
        categories.put("SAFETY", "Ing√©nierie");
        categories.put("MINING", "Ing√©nierie");
        categories.put("PSYCHOLOGY", "Sciences Humaines");
        categories.put("AERONAUTICAL", "Ing√©nierie");
        categories.put("AEROSPACE", "Ing√©nierie");
        categories.put("MEDICINE", "Sant√©");
        
        return categories.getOrDefault(majorCode, "G√©n√©ral");
    }
    
    
    /**
     * Obtient les recommandations bas√©es sur le profil utilisateur (m√©thode de fallback)
     */
    public List<MajorRecommendationDto> getRecommendations(Map<String, Integer> userProfile) {
        // M√©thode de fallback avec des donn√©es simul√©es
        return List.of(
            MajorRecommendationDto.builder()
                .majorCode("CS")
                .majorName("Informatique")
                .matchingScore(85.5)
                .matchingPercentage("85.5%")
                .category("Informatique")
                .reasoning("Vos comp√©tences techniques et votre logique analytique correspondent parfaitement √† cette fili√®re.")
                .build(),
            MajorRecommendationDto.builder()
                .majorCode("MECH")
                .majorName("G√©nie M√©canique")
                .matchingScore(78.2)
                .matchingPercentage("78.2%")
                .category("Ing√©nierie")
                .reasoning("Votre int√©r√™t pour les sciences et les comp√©tences manuelles font de vous un candidat id√©al.")
                .build(),
            MajorRecommendationDto.builder()
                .majorCode("BUSADM")
                .majorName("Administration des Affaires")
                .matchingScore(72.1)
                .matchingPercentage("72.1%")
                .category("Commerce")
                .reasoning("Vos comp√©tences organisationnelles et votre int√©r√™t pour le business sont des atouts.")
                .build()
        );
    }
}

