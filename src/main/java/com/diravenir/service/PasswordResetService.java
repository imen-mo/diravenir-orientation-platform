package com.diravenir.service;

import com.diravenir.Entities.PasswordResetToken;
import com.diravenir.Entities.Utilisateur;
import com.diravenir.repository.PasswordResetTokenRepository;
import com.diravenir.repository.UtilisateurRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class PasswordResetService {

    private final PasswordResetTokenRepository tokenRepository;
    private final UtilisateurRepository utilisateurRepository;
    private final EmailService emailService;
    private final PasswordEncoder passwordEncoder;

    @Value("${app.password.reset.expiration:1}")
    private int expirationHours;

    /**
     * G√©n√®re et envoie un token de r√©initialisation de mot de passe
     */
    @Transactional
    public boolean generateAndSendResetEmail(String email) {
        try {
            // V√©rifier si l'utilisateur existe
            Utilisateur utilisateur = utilisateurRepository.findByEmail(email)
                    .orElse(null);

            if (utilisateur == null) {
                System.out.println("‚ùå Utilisateur non trouv√© pour la r√©initialisation: " + email);
                return false;
            }

            // Supprimer l'ancien token s'il existe
            tokenRepository.deleteByUtilisateurId(utilisateur.getId());

            // Cr√©er un nouveau token
            String token = UUID.randomUUID().toString();
            LocalDateTime expirationDate = LocalDateTime.now().plusHours(expirationHours);

            PasswordResetToken resetToken = PasswordResetToken.builder()
                    .token(token)
                    .utilisateur(utilisateur)
                    .expiryDate(expirationDate)
                    .build();

            tokenRepository.save(resetToken);

            // Envoyer l'email de r√©initialisation
            emailService.sendPasswordResetEmail(utilisateur.getEmail(), utilisateur.getNom(), token);
            return true;

        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la g√©n√©ration du token de r√©initialisation: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * Valide un token de r√©initialisation de mot de passe
     */
    public boolean validateResetToken(String token) {
        try {
            PasswordResetToken resetToken = tokenRepository.findByToken(token)
                    .orElse(null);

            if (resetToken == null) {
                System.out.println("‚ùå Token de r√©initialisation non trouv√©: " + token);
                return false;
            }

            if (!resetToken.isValid()) {
                System.out.println("‚ùå Token de r√©initialisation expir√© ou d√©j√† utilis√©: " + token);
                return false;
            }

            return true;

        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la validation du token: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * R√©initialise le mot de passe avec un token valide
     */
    @Transactional
    public boolean resetPassword(String token, String newPassword) {
        try {
            PasswordResetToken resetToken = tokenRepository.findByToken(token)
                    .orElse(null);

            if (resetToken == null) {
                System.out.println("‚ùå Token de r√©initialisation non trouv√©: " + token);
                return false;
            }

            if (!resetToken.isValid()) {
                System.out.println("‚ùå Token de r√©initialisation expir√© ou d√©j√† utilis√©: " + token);
                return false;
            }

            // Marquer le token comme utilis√©
            resetToken.setUsed(true);
            tokenRepository.save(resetToken);

            // Mettre √† jour le mot de passe
            Utilisateur utilisateur = resetToken.getUtilisateur();
            utilisateur.setPassword(passwordEncoder.encode(newPassword));
            utilisateurRepository.save(utilisateur);

            System.out.println("‚úÖ Mot de passe r√©initialis√© avec succ√®s pour: " + utilisateur.getEmail());
            return true;

        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la r√©initialisation du mot de passe: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * Nettoyage automatique des tokens expir√©s (toutes les heures)
     */
    @Scheduled(fixedRate = 3600000, initialDelay = 60000) // 1 heure, d√©marrage apr√®s 1 minute
    @Transactional
    public void cleanupExpiredTokens() {
        try {
            LocalDateTime now = LocalDateTime.now();
            tokenRepository.deleteExpiredTokens(now);
            
            System.out.println("üßπ Nettoyage des tokens de r√©initialisation expir√©s effectu√©");
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors du nettoyage des tokens expir√©s: " + e.getMessage());
            // Log d√©taill√© pour le d√©bogage
            if (e.getMessage() != null && e.getMessage().contains("Executing an update/delete query")) {
                System.out.println("‚ÑπÔ∏è  Cette erreur est normale au d√©marrage, le nettoyage reprendra automatiquement");
            }
        }
    }
}
