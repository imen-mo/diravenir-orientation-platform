package com.dira.diravenir1.service.validation;

import com.dira.diravenir1.dto.UserProfileDTO;
import com.dira.diravenir1.dto.MajorProfileDTO;
import com.dira.diravenir1.dto.MajorRecommendationDTO;
import com.dira.diravenir1.service.RecommendationService;
import com.dira.diravenir1.service.ScoreCalculationService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import java.util.ArrayList;

/**
 * Tests de validation des r√©sultats pour v√©rifier la qualit√© des recommandations.
 * 
 * Ces tests valident :
 * - La coh√©rence des scores (plages 30-95%)
 * - La qualit√© des recommandations
 * - La logique m√©tier des r√©sultats
 * - La stabilit√© des algorithmes
 */
@SpringBootTest
@ActiveProfiles("test")
@DisplayName("Tests de validation des r√©sultats de l'algorithme d'orientation")
class ResultValidationTest {
    
    @Autowired
    private RecommendationService recommendationService;
    
    @Autowired
    private ScoreCalculationService scoreCalculationService;
    
    private UserProfileDTO scientificUser;
    private UserProfileDTO artisticUser;
    private UserProfileDTO businessUser;
    private UserProfileDTO medicalUser;
    
    private MajorProfileDTO informatiqueMajor;
    private MajorProfileDTO artsMajor;
    private MajorProfileDTO businessMajor;
    private MajorProfileDTO medecineMajor;
    
    // Seuils de validation des scores
    private static final double MIN_SCORE_THRESHOLD = 0.30; // 30% minimum
    private static final double MAX_SCORE_THRESHOLD = 0.95; // 95% maximum
    private static final double SCORE_TOLERANCE = 0.05; // 5% de tol√©rance
    
    @BeforeEach
    void setUp() {
        // Cr√©ation de profils utilisateur sp√©cialis√©s
        scientificUser = createScientificUserProfile();
        artisticUser = createArtisticUserProfile();
        businessUser = createBusinessUserProfile();
        medicalUser = createMedicalUserProfile();
        
        // Cr√©ation de profils majeure sp√©cialis√©s
        informatiqueMajor = createInformatiqueMajor();
        artsMajor = createArtsMajor();
        businessMajor = createBusinessMajor();
        medecineMajor = createMedecineMajor();
    }
    
    @Nested
    @DisplayName("Tests de validation des plages de scores")
    class ScoreRangeValidationTests {
        
        @Test
        @DisplayName("Les scores doivent √™tre dans la plage 30-95%")
        void testScoreRangeValidation() {
            // Test avec utilisateur scientifique
            double scoreInformatique = scoreCalculationService.calculateFinalScore(scientificUser, informatiqueMajor);
            double scoreArts = scoreCalculationService.calculateFinalScore(scientificUser, artsMajor);
            
            System.out.println("üî¨ Utilisateur Scientifique:");
            System.out.println("  - Score Informatique: " + (scoreInformatique * 100) + "%");
            System.out.println("  - Score Arts: " + (scoreArts * 100) + "%");
            
            // Validation des plages
            assertTrue(scoreInformatique >= MIN_SCORE_THRESHOLD, 
                "Le score informatique doit √™tre >= " + (MIN_SCORE_THRESHOLD * 100) + "%, actuel: " + (scoreInformatique * 100) + "%");
            assertTrue(scoreInformatique <= MAX_SCORE_THRESHOLD, 
                "Le score informatique doit √™tre <= " + (MAX_SCORE_THRESHOLD * 100) + "%, actuel: " + (scoreInformatique * 100) + "%");
            
            assertTrue(scoreArts >= MIN_SCORE_THRESHOLD, 
                "Le score arts doit √™tre >= " + (MIN_SCORE_THRESHOLD * 100) + "%, actuel: " + (scoreArts * 100) + "%");
            assertTrue(scoreArts <= MAX_SCORE_THRESHOLD, 
                "Le score arts doit √™tre <= " + (MAX_SCORE_THRESHOLD * 100) + "%, actuel: " + (scoreArts * 100) + "%");
        }
        
        @Test
        @DisplayName("Les scores doivent √™tre coh√©rents avec le profil utilisateur")
        void testScoreConsistencyWithUserProfile() {
            // Utilisateur scientifique devrait avoir un meilleur score pour l'informatique que pour les arts
            double scoreInformatique = scoreCalculationService.calculateFinalScore(scientificUser, informatiqueMajor);
            double scoreArts = scoreCalculationService.calculateFinalScore(scientificUser, artsMajor);
            
            assertTrue(scoreInformatique > scoreArts, 
                "L'utilisateur scientifique devrait avoir un meilleur score pour l'informatique que pour les arts");
            
            // Utilisateur artistique devrait avoir un meilleur score pour les arts que pour l'informatique
            double scoreArtsForArtist = scoreCalculationService.calculateFinalScore(artisticUser, artsMajor);
            double scoreInformatiqueForArtist = scoreCalculationService.calculateFinalScore(artisticUser, informatiqueMajor);
            
            assertTrue(scoreArtsForArtist > scoreInformatiqueForArtist, 
                "L'utilisateur artistique devrait avoir un meilleur score pour les arts que pour l'informatique");
            
            System.out.println("üéØ Coh√©rence des scores:");
            System.out.println("  - Scientifique: Info=" + (scoreInformatique * 100) + "%, Arts=" + (scoreArts * 100) + "%");
            System.out.println("  - Artistique: Arts=" + (scoreArtsForArtist * 100) + "%, Info=" + (scoreInformatiqueForArtist * 100) + "%");
        }
        
        @Test
        @DisplayName("Les scores doivent √™tre stables entre plusieurs ex√©cutions")
        void testScoreStability() {
            double score1 = scoreCalculationService.calculateFinalScore(scientificUser, informatiqueMajor);
            double score2 = scoreCalculationService.calculateFinalScore(scientificUser, informatiqueMajor);
            double score3 = scoreCalculationService.calculateFinalScore(scientificUser, informatiqueMajor);
            
            // Les scores doivent √™tre identiques (stabilit√©)
            assertEquals(score1, score2, SCORE_TOLERANCE, "Les scores doivent √™tre stables entre ex√©cutions");
            assertEquals(score2, score3, SCORE_TOLERANCE, "Les scores doivent √™tre stables entre ex√©cutions");
            assertEquals(score1, score3, SCORE_TOLERANCE, "Les scores doivent √™tre stables entre ex√©cutions");
            
            System.out.println("üîÑ Stabilit√© des scores: " + (score1 * 100) + "% (3 ex√©cutions identiques)");
        }
    }
    
    @Nested
    @DisplayName("Tests de validation de la qualit√© des recommandations")
    class RecommendationQualityTests {
        
        @Test
        @DisplayName("Les recommandations doivent √™tre pertinentes")
        void testRecommendationRelevance() {
            // Calcul des scores pour toutes les majeures
            List<com.dira.diravenir1.dto.MatchingResult> matchingResults = createMatchingResults(scientificUser);
            
            List<MajorRecommendationDTO> recommendations = recommendationService.generateRecommendations(matchingResults);
            
            assertNotNull(recommendations, "Les recommandations ne doivent pas √™tre null");
            assertFalse(recommendations.isEmpty(), "Les recommandations ne doivent pas √™tre vides");
            
            // La premi√®re recommandation doit √™tre l'informatique pour un utilisateur scientifique
            MajorRecommendationDTO topRecommendation = recommendations.get(0);
            assertEquals("Informatique", topRecommendation.getName(), 
                "La premi√®re recommandation pour un utilisateur scientifique doit √™tre l'informatique");
            
            System.out.println("üèÜ Recommandations pour utilisateur scientifique:");
            for (int i = 0; i < Math.min(recommendations.size(), 3); i++) {
                MajorRecommendationDTO rec = recommendations.get(i);
                System.out.println("  " + (i + 1) + ". " + rec.getName() + " - " + (rec.getMatchingScore() * 100) + "%");
            }
        }
        
        @Test
        @DisplayName("Les recommandations doivent √™tre tri√©es par score d√©croissant")
        void testRecommendationSorting() {
            List<com.dira.diravenir1.dto.MatchingResult> matchingResults = createMatchingResults(scientificUser);
            List<MajorRecommendationDTO> recommendations = recommendationService.generateRecommendations(matchingResults);
            
            // V√©rification du tri d√©croissant
            for (int i = 0; i < recommendations.size() - 1; i++) {
                double currentScore = recommendations.get(i).getMatchingScore();
                double nextScore = recommendations.get(i + 1).getMatchingScore();
                
                assertTrue(currentScore >= nextScore, 
                    "Les recommandations doivent √™tre tri√©es par score d√©croissant");
            }
            
            System.out.println("üìä Tri des recommandations (scores d√©croissants):");
            for (int i = 0; i < recommendations.size(); i++) {
                MajorRecommendationDTO rec = recommendations.get(i);
                System.out.println("  " + (i + 1) + ". " + rec.getName() + " - " + (rec.getMatchingScore() * 100) + "%");
            }
        }
        
        @Test
        @DisplayName("Les recommandations doivent avoir des explications")
        void testRecommendationExplanations() {
            List<com.dira.diravenir1.dto.MatchingResult> matchingResults = createMatchingResults(scientificUser);
            List<MajorRecommendationDTO> recommendations = recommendationService.generateRecommendations(matchingResults);
            
            for (MajorRecommendationDTO recommendation : recommendations) {
                assertNotNull(recommendation.getExplanation(), 
                    "Chaque recommandation doit avoir une explication");
                assertFalse(recommendation.getExplanation().isEmpty(), 
                    "L'explication ne doit pas √™tre vide");
                
                // L'explication doit contenir des informations pertinentes
                assertTrue(recommendation.getExplanation().length() > 20, 
                    "L'explication doit √™tre suffisamment d√©taill√©e");
            }
            
            System.out.println("üí° Explications des recommandations:");
            for (MajorRecommendationDTO rec : recommendations) {
                System.out.println("  - " + rec.getName() + ": " + rec.getExplanation());
            }
        }
    }
    
    @Nested
    @DisplayName("Tests de validation de la logique m√©tier")
    class BusinessLogicValidationTests {
        
        @Test
        @DisplayName("Les profils tr√®s diff√©rents doivent avoir des scores faibles")
        void testVeryDifferentProfiles() {
            // Utilisateur scientifique vs majeure arts
            double score = scoreCalculationService.calculateFinalScore(scientificUser, artsMajor);
            
            // Le score doit √™tre relativement faible pour des profils tr√®s diff√©rents
            assertTrue(score < 0.7, 
                "Des profils tr√®s diff√©rents doivent avoir un score < 70%, actuel: " + (score * 100) + "%");
            
            System.out.println("‚ùå Profils tr√®s diff√©rents - Scientifique vs Arts: " + (score * 100) + "%");
        }
        
        @Test
        @DisplayName("Les profils similaires doivent avoir des scores √©lev√©s")
        void testSimilarProfiles() {
            // Utilisateur scientifique vs majeure informatique
            double score = scoreCalculationService.calculateFinalScore(scientificUser, informatiqueMajor);
            
            // Le score doit √™tre relativement √©lev√© pour des profils similaires
            assertTrue(score > 0.6, 
                "Des profils similaires doivent avoir un score > 60%, actuel: " + (score * 100) + "%");
            
            System.out.println("‚úÖ Profils similaires - Scientifique vs Informatique: " + (score * 100) + "%");
        }
        
        @Test
        @DisplayName("Les profils identiques doivent avoir des scores tr√®s √©lev√©s")
        void testIdenticalProfiles() {
            // Cr√©ation d'un profil majeure identique au profil utilisateur scientifique
            MajorProfileDTO identicalMajor = createIdenticalMajor(scientificUser);
            
            double score = scoreCalculationService.calculateFinalScore(scientificUser, identicalMajor);
            
            // Le score doit √™tre tr√®s √©lev√© pour des profils identiques
            assertTrue(score > 0.85, 
                "Des profils identiques doivent avoir un score > 85%, actuel: " + (score * 100) + "%");
            
            System.out.println("üéØ Profils identiques: " + (score * 100) + "%");
        }
        
        @Test
        @DisplayName("Les recommandations doivent respecter la logique m√©tier")
        void testBusinessLogicCompliance() {
            // Test avec diff√©rents types d'utilisateurs
            testUserTypeRecommendations(scientificUser, "Informatique", "Scientifique");
            testUserTypeRecommendations(artisticUser, "Arts", "Artistique");
            testUserTypeRecommendations(businessUser, "Business Administration", "Business");
            testUserTypeRecommendations(medicalUser, "M√©decine", "M√©dical");
        }
    }
    
    @Nested
    @DisplayName("Tests de validation de la robustesse")
    class RobustnessValidationTests {
        
        @Test
        @DisplayName("Le syst√®me doit g√©rer les profils avec des scores manquants")
        void testMissingScoresHandling() {
            // Cr√©ation d'un profil avec des scores manquants
            UserProfileDTO incompleteUser = createIncompleteUserProfile();
            
            double score = scoreCalculationService.calculateFinalScore(incompleteUser, informatiqueMajor);
            
            // Le score doit √™tre valide malgr√© les donn√©es manquantes
            assertTrue(score >= 0.0 && score <= 1.0, 
                "Le score doit √™tre valide m√™me avec des donn√©es manquantes");
            
            System.out.println("‚ö†Ô∏è Profil incomplet - Score: " + (score * 100) + "%");
        }
        
        @Test
        @DisplayName("Le syst√®me doit g√©rer les profils avec des scores extr√™mes")
        void testExtremeScoresHandling() {
            // Cr√©ation d'un profil avec des scores extr√™mes
            UserProfileDTO extremeUser = createExtremeUserProfile();
            
            double score = scoreCalculationService.calculateFinalScore(extremeUser, informatiqueMajor);
            
            // Le score doit √™tre valide malgr√© les scores extr√™mes
            assertTrue(score >= 0.0 && score <= 1.0, 
                "Le score doit √™tre valide m√™me avec des scores extr√™mes");
            
            System.out.println("üî• Profil extr√™me - Score: " + (score * 100) + "%");
        }
        
        @Test
        @DisplayName("Le syst√®me doit g√©rer les profils vides")
        void testEmptyProfilesHandling() {
            // Cr√©ation d'un profil vide
            UserProfileDTO emptyUser = createEmptyUserProfile();
            
            double score = scoreCalculationService.calculateFinalScore(emptyUser, informatiqueMajor);
            
            // Le score doit √™tre valide m√™me pour un profil vide
            assertTrue(score >= 0.0 && score <= 1.0, 
                "Le score doit √™tre valide m√™me pour un profil vide");
            
            System.out.println("üì≠ Profil vide - Score: " + (score * 100) + "%");
        }
    }
    
    // ==================== M√âTHODES UTILITAIRES ====================
    
    /**
     * Cr√©e une liste de r√©sultats de matching pour un utilisateur
     */
    private List<com.dira.diravenir1.dto.MatchingResult> createMatchingResults(UserProfileDTO user) {
        List<com.dira.diravenir1.dto.MatchingResult> results = new ArrayList<>();
        
        // Calcul des scores pour toutes les majeures
        double scoreInformatique = scoreCalculationService.calculateFinalScore(user, informatiqueMajor);
        double scoreArts = scoreCalculationService.calculateFinalScore(user, artsMajor);
        double scoreBusiness = scoreCalculationService.calculateFinalScore(user, businessMajor);
        double scoreMedecine = scoreCalculationService.calculateFinalScore(user, medecineMajor);
        
        // Cr√©ation des objets MatchingResult
        com.dira.diravenir1.dto.MatchingResult resultInfo = new com.dira.diravenir1.dto.MatchingResult();
        resultInfo.setMajorName("Informatique");
        resultInfo.setGlobalScore(scoreInformatique);
        results.add(resultInfo);
        
        com.dira.diravenir1.dto.MatchingResult resultArts = new com.dira.diravenir1.dto.MatchingResult();
        resultArts.setMajorName("Arts");
        resultArts.setGlobalScore(scoreArts);
        results.add(resultArts);
        
        com.dira.diravenir1.dto.MatchingResult resultBusiness = new com.dira.diravenir1.dto.MatchingResult();
        resultBusiness.setMajorName("Business Administration");
        resultBusiness.setGlobalScore(scoreBusiness);
        results.add(resultBusiness);
        
        com.dira.diravenir1.dto.MatchingResult resultMedecine = new com.dira.diravenir1.dto.MatchingResult();
        resultMedecine.setMajorName("M√©decine");
        resultMedecine.setGlobalScore(scoreMedecine);
        results.add(resultMedecine);
        
        return results;
    }
    
    /**
     * Teste les recommandations pour un type d'utilisateur sp√©cifique
     */
    private void testUserTypeRecommendations(UserProfileDTO user, String expectedTopMajor, String userType) {
        List<com.dira.diravenir1.dto.MatchingResult> matchingResults = createMatchingResults(user);
        List<MajorRecommendationDTO> recommendations = recommendationService.generateRecommendations(matchingResults);
        
        if (!recommendations.isEmpty()) {
            MajorRecommendationDTO topRecommendation = recommendations.get(0);
            System.out.println("üéì " + userType + " - Top recommandation: " + topRecommendation.getName() + 
                " (" + (topRecommendation.getMatchingScore() * 100) + "%)");
            
            // V√©rification que la premi√®re recommandation est logique
            if (expectedTopMajor.equals(topRecommendation.getName())) {
                System.out.println("  ‚úÖ Recommandation logique confirm√©e");
            } else {
                System.out.println("  ‚ö†Ô∏è Recommandation diff√©rente de celle attendue");
            }
        }
    }
    
    /**
     * Cr√©e un profil utilisateur scientifique
     */
    private UserProfileDTO createScientificUserProfile() {
        UserProfileDTO profile = new UserProfileDTO();
        profile.setInteretScientifiqueTech(5);
        profile.setInteretArtistiqueCreatif(1);
        profile.setInteretSocialHumain(2);
        profile.setInteretBusinessGestion(2);
        profile.setInteretLogiqueAnalytique(5);
        profile.setCompetenceResolutionProblemes(5);
        profile.setCompetenceCommunication(3);
        profile.setCompetenceOrganisation(3);
        profile.setCompetenceManuelTechnique(4);
        profile.setValeurImpactSocietal(3);
        profile.setValeurInnovationChallenge(4);
        profile.setValeurStabiliteSecurite(2);
        profile.setValeurAutonomie(4);
        profile.setPrefTravailEquipeCollab(2);
        profile.setPrefTravailAutonome(4);
        profile.setPrefPratiqueTerrain(3);
        profile.setPrefTheorieRecherche(5);
        return profile;
    }
    
    /**
     * Cr√©e un profil utilisateur artistique
     */
    private UserProfileDTO createArtisticUserProfile() {
        UserProfileDTO profile = new UserProfileDTO();
        profile.setInteretScientifiqueTech(1);
        profile.setInteretArtistiqueCreatif(5);
        profile.setInteretSocialHumain(3);
        profile.setInteretBusinessGestion(1);
        profile.setInteretLogiqueAnalytique(2);
        profile.setCompetenceResolutionProblemes(2);
        profile.setCompetenceCommunication(4);
        profile.setCompetenceOrganisation(2);
        profile.setCompetenceManuelTechnique(5);
        profile.setValeurImpactSocietal(4);
        profile.setValeurInnovationChallenge(5);
        profile.setValeurStabiliteSecurite(2);
        profile.setValeurAutonomie(4);
        profile.setPrefTravailEquipeCollab(3);
        profile.setPrefTravailAutonome(4);
        profile.setPrefPratiqueTerrain(5);
        profile.setPrefTheorieRecherche(2);
        return profile;
    }
    
    /**
     * Cr√©e un profil utilisateur business
     */
    private UserProfileDTO createBusinessUserProfile() {
        UserProfileDTO profile = new UserProfileDTO();
        profile.setInteretScientifiqueTech(2);
        profile.setInteretArtistiqueCreatif(2);
        profile.setInteretSocialHumain(4);
        profile.setInteretBusinessGestion(5);
        profile.setInteretLogiqueAnalytique(3);
        profile.setCompetenceResolutionProblemes(3);
        profile.setCompetenceCommunication(5);
        profile.setCompetenceOrganisation(5);
        profile.setCompetenceManuelTechnique(2);
        profile.setValeurImpactSocietal(3);
        profile.setValeurInnovationChallenge(4);
        profile.setValeurStabiliteSecurite(4);
        profile.setValeurAutonomie(3);
        profile.setPrefTravailEquipeCollab(5);
        profile.setPrefTravailAutonome(3);
        profile.setPrefPratiqueTerrain(3);
        profile.setPrefTheorieRecherche(2);
        return profile;
    }
    
    /**
     * Cr√©e un profil utilisateur m√©dical
     */
    private UserProfileDTO createMedicalUserProfile() {
        UserProfileDTO profile = new UserProfileDTO();
        profile.setInteretScientifiqueTech(4);
        profile.setInteretArtistiqueCreatif(2);
        profile.setInteretSocialHumain(5);
        profile.setInteretBusinessGestion(2);
        profile.setInteretLogiqueAnalytique(4);
        profile.setCompetenceResolutionProblemes(4);
        profile.setCompetenceCommunication(5);
        profile.setCompetenceOrganisation(4);
        profile.setCompetenceManuelTechnique(4);
        profile.setValeurImpactSocietal(5);
        profile.setValeurInnovationChallenge(3);
        profile.setValeurStabiliteSecurite(4);
        profile.setValeurAutonomie(3);
        profile.setPrefTravailEquipeCollab(4);
        profile.setPrefTravailAutonome(3);
        profile.setPrefPratiqueTerrain(5);
        profile.setPrefTheorieRecherche(4);
        return profile;
    }
    
    /**
     * Cr√©e un profil majeure informatique
     */
    private MajorProfileDTO createInformatiqueMajor() {
        MajorProfileDTO major = new MajorProfileDTO();
        major.setMajorName("Informatique");
        major.setInteretScientifiqueTech(5);
        major.setInteretArtistiqueCreatif(2);
        major.setInteretSocialHumain(2);
        major.setInteretBusinessGestion(2);
        major.setInteretLogiqueAnalytique(5);
        major.setCompetenceResolutionProblemes(5);
        major.setCompetenceCommunication(3);
        major.setCompetenceOrganisation(3);
        major.setCompetenceManuelTechnique(4);
        major.setValeurImpactSocietal(3);
        major.setValeurInnovationChallenge(4);
        major.setValeurStabiliteSecurite(2);
        major.setValeurAutonomie(4);
        major.setPrefTravailEquipeCollab(2);
        major.setPrefTravailAutonome(4);
        major.setPrefPratiqueTerrain(3);
        major.setPrefTheorieRecherche(4);
        return major;
    }
    
    /**
     * Cr√©e un profil majeure arts
     */
    private MajorProfileDTO createArtsMajor() {
        MajorProfileDTO major = new MajorProfileDTO();
        major.setMajorName("Arts");
        major.setInteretScientifiqueTech(1);
        major.setInteretArtistiqueCreatif(5);
        major.setInteretSocialHumain(3);
        major.setInteretBusinessGestion(1);
        major.setInteretLogiqueAnalytique(2);
        major.setCompetenceResolutionProblemes(2);
        major.setCompetenceCommunication(4);
        major.setCompetenceOrganisation(2);
        major.setCompetenceManuelTechnique(5);
        major.setValeurImpactSocietal(4);
        major.setValeurInnovationChallenge(5);
        major.setValeurStabiliteSecurite(2);
        major.setValeurAutonomie(4);
        major.setPrefTravailEquipeCollab(3);
        major.setPrefTravailAutonome(4);
        major.setPrefPratiqueTerrain(5);
        major.setPrefTheorieRecherche(2);
        return major;
    }
    
    /**
     * Cr√©e un profil majeure business
     */
    private MajorProfileDTO createBusinessMajor() {
        MajorProfileDTO major = new MajorProfileDTO();
        major.setMajorName("Business Administration");
        major.setInteretScientifiqueTech(2);
        major.setInteretArtistiqueCreatif(2);
        major.setInteretSocialHumain(4);
        major.setInteretBusinessGestion(5);
        major.setInteretLogiqueAnalytique(3);
        major.setCompetenceResolutionProblemes(3);
        major.setCompetenceCommunication(5);
        major.setCompetenceOrganisation(5);
        major.setCompetenceManuelTechnique(2);
        major.setValeurImpactSocietal(3);
        major.setValeurInnovationChallenge(4);
        major.setValeurStabiliteSecurite(4);
        major.setValeurAutonomie(3);
        major.setPrefTravailEquipeCollab(5);
        major.setPrefTravailAutonome(3);
        major.setPrefPratiqueTerrain(3);
        major.setPrefTheorieRecherche(2);
        return major;
    }
    
    /**
     * Cr√©e un profil majeure m√©decine
     */
    private MajorProfileDTO createMedecineMajor() {
        MajorProfileDTO major = new MajorProfileDTO();
        major.setMajorName("M√©decine");
        major.setInteretScientifiqueTech(4);
        major.setInteretArtistiqueCreatif(2);
        major.setInteretSocialHumain(5);
        major.setInteretBusinessGestion(2);
        major.setInteretLogiqueAnalytique(4);
        major.setCompetenceResolutionProblemes(4);
        major.setCompetenceCommunication(5);
        major.setCompetenceOrganisation(4);
        major.setCompetenceManuelTechnique(4);
        major.setValeurImpactSocietal(5);
        major.setValeurInnovationChallenge(3);
        major.setValeurStabiliteSecurite(4);
        major.setValeurAutonomie(3);
        major.setPrefTravailEquipeCollab(4);
        major.setPrefTravailAutonome(3);
        major.setPrefPratiqueTerrain(5);
        major.setPrefTheorieRecherche(4);
        return major;
    }
    
    /**
     * Cr√©e un profil majeure identique √† un profil utilisateur
     */
    private MajorProfileDTO createIdenticalMajor(UserProfileDTO user) {
        MajorProfileDTO major = new MajorProfileDTO();
        major.setMajorName("Identique");
        major.setInteretScientifiqueTech(user.getInteretScientifiqueTech());
        major.setInteretArtistiqueCreatif(user.getInteretArtistiqueCreatif());
        major.setInteretSocialHumain(user.getInteretSocialHumain());
        major.setInteretBusinessGestion(user.getInteretBusinessGestion());
        major.setInteretLogiqueAnalytique(user.getInteretLogiqueAnalytique());
        major.setCompetenceResolutionProblemes(user.getCompetenceResolutionProblemes());
        major.setCompetenceCommunication(user.getCompetenceCommunication());
        major.setCompetenceOrganisation(user.getCompetenceOrganisation());
        major.setCompetenceManuelTechnique(user.getCompetenceManuelTechnique());
        major.setValeurImpactSocietal(user.getValeurImpactSocietal());
        major.setValeurInnovationChallenge(user.getValeurInnovationChallenge());
        major.setValeurStabiliteSecurite(user.getValeurStabiliteSecurite());
        major.setValeurAutonomie(user.getValeurAutonomie());
        major.setPrefTravailEquipeCollab(user.getPrefTravailEquipeCollab());
        major.setPrefTravailAutonome(user.getPrefTravailAutonome());
        major.setPrefPratiqueTerrain(user.getPrefPratiqueTerrain());
        major.setPrefTheorieRecherche(user.getPrefTheorieRecherche());
        return major;
    }
    
    /**
     * Cr√©e un profil utilisateur incomplet avec des scores manquants
     */
    private UserProfileDTO createIncompleteUserProfile() {
        UserProfileDTO profile = new UserProfileDTO();
        profile.setInteretScientifiqueTech(4);
        profile.setInteretArtistiqueCreatif(0); // Score manquant
        profile.setInteretSocialHumain(3);
        profile.setInteretBusinessGestion(0); // Score manquant
        profile.setInteretLogiqueAnalytique(5);
        profile.setCompetenceResolutionProblemes(4);
        profile.setCompetenceCommunication(0); // Score manquant
        profile.setCompetenceOrganisation(3);
        profile.setCompetenceManuelTechnique(4);
        profile.setValeurImpactSocietal(3);
        profile.setValeurInnovationChallenge(4);
        profile.setValeurStabiliteSecurite(0); // Score manquant
        profile.setValeurAutonomie(4);
        profile.setPrefTravailEquipeCollab(3);
        profile.setPrefTravailAutonome(4);
        profile.setPrefPratiqueTerrain(4);
        profile.setPrefTheorieRecherche(3);
        return profile;
    }
    
    /**
     * Cr√©e un profil utilisateur avec des scores extr√™mes
     */
    private UserProfileDTO createExtremeUserProfile() {
        UserProfileDTO profile = new UserProfileDTO();
        profile.setInteretScientifiqueTech(5); // Score maximum
        profile.setInteretArtistiqueCreatif(1); // Score minimum
        profile.setInteretSocialHumain(5); // Score maximum
        profile.setInteretBusinessGestion(1); // Score minimum
        profile.setInteretLogiqueAnalytique(5); // Score maximum
        profile.setCompetenceResolutionProblemes(1); // Score minimum
        profile.setCompetenceCommunication(5); // Score maximum
        profile.setCompetenceOrganisation(1); // Score minimum
        profile.setCompetenceManuelTechnique(5); // Score maximum
        profile.setValeurImpactSocietal(1); // Score minimum
        profile.setValeurInnovationChallenge(5); // Score maximum
        profile.setValeurStabiliteSecurite(1); // Score minimum
        profile.setValeurAutonomie(5); // Score maximum
        profile.setPrefTravailEquipeCollab(1); // Score minimum
        profile.setPrefTravailAutonome(5); // Score maximum
        profile.setPrefPratiqueTerrain(1); // Score minimum
        profile.setPrefTheorieRecherche(5); // Score maximum
        return profile;
    }
    
    /**
     * Cr√©e un profil utilisateur vide avec tous les scores √† 0
     */
    private UserProfileDTO createEmptyUserProfile() {
        UserProfileDTO profile = new UserProfileDTO();
        profile.setInteretScientifiqueTech(0);
        profile.setInteretArtistiqueCreatif(0);
        profile.setInteretSocialHumain(0);
        profile.setInteretBusinessGestion(0);
        profile.setInteretLogiqueAnalytique(0);
        profile.setCompetenceResolutionProblemes(0);
        profile.setCompetenceCommunication(0);
        profile.setCompetenceOrganisation(0);
        profile.setCompetenceManuelTechnique(0);
        profile.setValeurImpactSocietal(0);
        profile.setValeurInnovationChallenge(0);
        profile.setValeurStabiliteSecurite(0);
        profile.setValeurAutonomie(0);
        profile.setPrefTravailEquipeCollab(0);
        profile.setPrefTravailAutonome(0);
        profile.setPrefPratiqueTerrain(0);
        profile.setPrefTheorieRecherche(0);
        return profile;
    }
}
