const axios = require('axios');

const BASE_URL = 'http://localhost:8084/api/orientation';

// Test du stockage en base de donn√©es
const testData = {
    studentInfo: {
        fullName: "Test Database User",
        email: "test.database@example.com",
        phone: "0123456789"
    },
    q1: "A", // Cr√©er
    q2: "A", // Sciences
    q3: "A", // Outils techniques
    q4: "A", // Analyser logiquement
    q5: "A", // R√©solution de probl√®mes
    q6: "A", // Apprentissage structur√©
    q7: "A", // Impact soci√©tal
    q8: "A", // Travail en √©quipe
    q9: "A", // Innovation
    q10: "A", // D√©fis techniques
    q11: "A", // Travail autonome
    q12: "A", // Pr√©sentation technique
    q13: "A", // D√©cision analytique
    q14: "A" // Sciences/Technologie
};

async function testDatabaseStorage() {
    console.log('üóÑÔ∏è TEST DU STOCKAGE EN BASE DE DONN√âES');
    console.log('================================================================================');
    
    try {
        console.log('üì§ 1. Envoi des donn√©es au backend...');
        console.log('üìä Email de test:', testData.studentInfo.email);
        
        const response = await axios.post(`${BASE_URL}/complete`, testData, {
            headers: { 'Content-Type': 'application/json' },
            timeout: 30000
        });
        
        if (response.data.success) {
            console.log('‚úÖ Backend a trait√© les donn√©es avec succ√®s');
            
            const { userProfile, recommendations } = response.data;
            
            console.log('\nüìä PROFIL UTILISATEUR G√âN√âR√â:');
            console.log(JSON.stringify(userProfile, null, 2));
            
            console.log('\nüéØ RECOMMANDATIONS RE√áUES:');
            console.log(`üìà Nombre de recommandations: ${recommendations.length}`);
            
            if (recommendations.length > 0) {
                console.log('\nüèÜ TOP 3 RECOMMANDATIONS:');
                recommendations.slice(0, 3).forEach((rec, index) => {
                    console.log(`${index + 1}. ${rec.majorName} - Score: ${rec.matchingScore} (${rec.matchingPercentage})`);
                });
            }
            
            // Maintenant testons la r√©cup√©ration depuis la base de donn√©es
            console.log('\nüì• 2. Test de r√©cup√©ration depuis la base de donn√©es...');
            
            try {

                const dbResponse = await axios.get(`${BASE_URL}/results/email/${testData.studentInfo.email}`, {
                    headers: { 'Content-Type': 'application/json' },
                    timeout: 10000
                });
                
                if (dbResponse.data.success) {
                    console.log('‚úÖ Donn√©es r√©cup√©r√©es depuis la base de donn√©es');
                    
                    const dbData = dbResponse.data.results;
                    console.log('\nüìä DONN√âES R√âCUP√âR√âES DE LA DB:');
                    console.log(`   Test ID: ${dbData.id}`);
                    console.log(`   Email: ${dbData.orientationTest?.studentEmail || 'N/A'}`);
                    console.log(`   Nom: ${dbData.orientationTest?.studentName || 'N/A'}`);
                    console.log(`   T√©l√©phone: ${dbData.orientationTest?.studentPhone || 'N/A'}`);
                    console.log(`   Date de calcul: ${dbData.calculatedAt}`);
                    console.log(`   M√©thode de calcul: ${dbData.calculationMethod}`);
                    console.log(`   Score top recommandation: ${dbData.topRecommendationScore}`);
                    console.log(`   Majeure top recommandation: ${dbData.topRecommendationMajor}`);
                    
                    if (dbData.recommendations && dbData.recommendations.length > 0) {
                        console.log('\nüéØ RECOMMANDATIONS STOCK√âES EN DB:');
                        dbData.recommendations.forEach((rec, index) => {
                            console.log(`${index + 1}. ${rec.majorName} - Score: ${rec.matchingScore} (${rec.matchingPercentage})`);
                        });
                    }
                    
                    // V√©rifier la coh√©rence des donn√©es
                    console.log('\nüîç V√âRIFICATION DE LA COH√âRENCE:');
                    
                    // V√©rifier que les scores sont identiques
                    const originalScores = recommendations.slice(0, 3).map(r => r.matchingScore);
                    const dbScores = dbData.recommendations.slice(0, 3).map(r => r.matchingScore);
                    
                    const scoresMatch = originalScores.every((score, index) => 
                        Math.abs(score - dbScores[index]) < 0.01
                    );
                    
                    if (scoresMatch) {
                        console.log('‚úÖ Les scores sont identiques entre calcul et stockage');
                    } else {
                        console.log('‚ùå Les scores diff√®rent entre calcul et stockage');
                        console.log('   Scores originaux:', originalScores);
                        console.log('   Scores en DB:', dbScores);
                    }
                    
                    // V√©rifier que les majeures sont identiques
                    const originalMajors = recommendations.slice(0, 3).map(r => r.majorName);
                    const dbMajors = dbData.recommendations.slice(0, 3).map(r => r.majorName);
                    
                    const majorsMatch = originalMajors.every((major, index) => 
                        major === dbMajors[index]
                    );
                    
                    if (majorsMatch) {
                        console.log('‚úÖ Les majeures sont identiques entre calcul et stockage');
                    } else {
                        console.log('‚ùå Les majeures diff√®rent entre calcul et stockage');
                        console.log('   Majeures originales:', originalMajors);
                        console.log('   Majeures en DB:', dbMajors);
                    }
                    
                    console.log('\nüéâ TEST DE STOCKAGE R√âUSSI !');
                    console.log('‚úÖ Les donn√©es sont correctement stock√©es et r√©cup√©r√©es de la base de donn√©es');
                    
                } else {
                    console.log('‚ùå Erreur lors de la r√©cup√©ration depuis la DB:', dbResponse.data.error);
                }
                
            } catch (dbError) {
                console.log('‚ùå Erreur lors de la r√©cup√©ration depuis la DB:', dbError.message);
                if (dbError.response) {
                    console.log('   Status:', dbError.response.status);
                    console.log('   Data:', JSON.stringify(dbError.response.data, null, 2));
                }
            }
            
        } else {
            console.log('‚ùå Erreur dans le traitement:', response.data.error);
        }
    } catch (error) {
        console.log('‚ùå Erreur:', error.message);
        if (error.response) {
            console.log('   Status:', error.response.status);
            console.log('   Data:', JSON.stringify(error.response.data, null, 2));
        }
    }
}

testDatabaseStorage().catch(console.error);
